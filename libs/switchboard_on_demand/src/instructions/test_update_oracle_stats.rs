//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
#[derive(Debug)]
pub struct TestUpdateOracleStats {
    /// The OracleStats account to update.
    pub oracle_stats: solana_pubkey::Pubkey,
}

impl TestUpdateOracleStats {
    pub fn instruction(
        &self,
        args: TestUpdateOracleStatsInstructionArgs,
    ) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: TestUpdateOracleStatsInstructionArgs,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(1 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(
            self.oracle_stats,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&TestUpdateOracleStatsInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_instruction::Instruction {
            program_id: crate::SB_ON_DEMAND_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct TestUpdateOracleStatsInstructionData {
    discriminator: [u8; 8],
}

impl TestUpdateOracleStatsInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [175, 48, 162, 252, 154, 197, 149, 187],
        }
    }
}

impl Default for TestUpdateOracleStatsInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct TestUpdateOracleStatsInstructionArgs {
    pub new_reward_score: u64,
}

/// Instruction builder for `TestUpdateOracleStats`.
///
/// ### Accounts:
///
///   0. `[writable]` oracle_stats
#[derive(Clone, Debug, Default)]
pub struct TestUpdateOracleStatsBuilder {
    oracle_stats: Option<solana_pubkey::Pubkey>,
    new_reward_score: Option<u64>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl TestUpdateOracleStatsBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    /// The OracleStats account to update.
    #[inline(always)]
    pub fn oracle_stats(&mut self, oracle_stats: solana_pubkey::Pubkey) -> &mut Self {
        self.oracle_stats = Some(oracle_stats);
        self
    }
    #[inline(always)]
    pub fn new_reward_score(&mut self, new_reward_score: u64) -> &mut Self {
        self.new_reward_score = Some(new_reward_score);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = TestUpdateOracleStats {
            oracle_stats: self.oracle_stats.expect("oracle_stats is not set"),
        };
        let args = TestUpdateOracleStatsInstructionArgs {
            new_reward_score: self
                .new_reward_score
                .clone()
                .expect("new_reward_score is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `test_update_oracle_stats` CPI accounts.
pub struct TestUpdateOracleStatsCpiAccounts<'a, 'b> {
    /// The OracleStats account to update.
    pub oracle_stats: &'b solana_account_info::AccountInfo<'a>,
}

/// `test_update_oracle_stats` CPI instruction.
pub struct TestUpdateOracleStatsCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,
    /// The OracleStats account to update.
    pub oracle_stats: &'b solana_account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: TestUpdateOracleStatsInstructionArgs,
}

impl<'a, 'b> TestUpdateOracleStatsCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: TestUpdateOracleStatsCpiAccounts<'a, 'b>,
        args: TestUpdateOracleStatsInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            oracle_stats: accounts.oracle_stats,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(1 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(
            *self.oracle_stats.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&TestUpdateOracleStatsInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_instruction::Instruction {
            program_id: crate::SB_ON_DEMAND_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(2 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.oracle_stats.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `TestUpdateOracleStats` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` oracle_stats
#[derive(Clone, Debug)]
pub struct TestUpdateOracleStatsCpiBuilder<'a, 'b> {
    instruction: Box<TestUpdateOracleStatsCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> TestUpdateOracleStatsCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(TestUpdateOracleStatsCpiBuilderInstruction {
            __program: program,
            oracle_stats: None,
            new_reward_score: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    /// The OracleStats account to update.
    #[inline(always)]
    pub fn oracle_stats(
        &mut self,
        oracle_stats: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.oracle_stats = Some(oracle_stats);
        self
    }
    #[inline(always)]
    pub fn new_reward_score(&mut self, new_reward_score: u64) -> &mut Self {
        self.instruction.new_reward_score = Some(new_reward_score);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        let args = TestUpdateOracleStatsInstructionArgs {
            new_reward_score: self
                .instruction
                .new_reward_score
                .clone()
                .expect("new_reward_score is not set"),
        };
        let instruction = TestUpdateOracleStatsCpi {
            __program: self.instruction.__program,

            oracle_stats: self
                .instruction
                .oracle_stats
                .expect("oracle_stats is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct TestUpdateOracleStatsCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    oracle_stats: Option<&'b solana_account_info::AccountInfo<'a>>,
    new_reward_score: Option<u64>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
