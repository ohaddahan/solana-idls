//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;
use solana_pubkey::Pubkey;

/// Accounts.
#[derive(Debug)]
pub struct OracleInit {
    pub oracle: solana_pubkey::Pubkey,

    pub oracle_stats: solana_pubkey::Pubkey,

    pub program_state: solana_pubkey::Pubkey,

    pub payer: solana_pubkey::Pubkey,

    pub system_program: solana_pubkey::Pubkey,

    pub token_program: solana_pubkey::Pubkey,

    pub lut_signer: solana_pubkey::Pubkey,

    pub lut: solana_pubkey::Pubkey,

    pub address_lookup_table_program: solana_pubkey::Pubkey,
}

impl OracleInit {
    pub fn instruction(&self, args: OracleInitInstructionArgs) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: OracleInitInstructionArgs,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(9 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(self.oracle, true));
        accounts.push(solana_instruction::AccountMeta::new(
            self.oracle_stats,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.program_state,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.payer, true));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.lut_signer,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.lut, false));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.address_lookup_table_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&OracleInitInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_instruction::Instruction {
            program_id: crate::SB_ON_DEMAND_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct OracleInitInstructionData {
    discriminator: [u8; 8],
}

impl OracleInitInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [21, 158, 66, 65, 60, 221, 148, 61],
        }
    }
}

impl Default for OracleInitInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct OracleInitInstructionArgs {
    pub recent_slot: u64,
    pub authority: Pubkey,
    pub queue: Pubkey,
    pub secp_authority: Option<[u8; 64]>,
}

/// Instruction builder for `OracleInit`.
///
/// ### Accounts:
///
///   0. `[writable, signer]` oracle
///   1. `[writable]` oracle_stats
///   2. `[writable]` program_state
///   3. `[writable, signer]` payer
///   4. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   5. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   6. `[]` lut_signer
///   7. `[writable]` lut
///   8. `[optional]` address_lookup_table_program (default to `AddressLookupTab1e1111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct OracleInitBuilder {
    oracle: Option<solana_pubkey::Pubkey>,
    oracle_stats: Option<solana_pubkey::Pubkey>,
    program_state: Option<solana_pubkey::Pubkey>,
    payer: Option<solana_pubkey::Pubkey>,
    system_program: Option<solana_pubkey::Pubkey>,
    token_program: Option<solana_pubkey::Pubkey>,
    lut_signer: Option<solana_pubkey::Pubkey>,
    lut: Option<solana_pubkey::Pubkey>,
    address_lookup_table_program: Option<solana_pubkey::Pubkey>,
    recent_slot: Option<u64>,
    authority: Option<Pubkey>,
    queue: Option<Pubkey>,
    secp_authority: Option<[u8; 64]>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl OracleInitBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn oracle(&mut self, oracle: solana_pubkey::Pubkey) -> &mut Self {
        self.oracle = Some(oracle);
        self
    }
    #[inline(always)]
    pub fn oracle_stats(&mut self, oracle_stats: solana_pubkey::Pubkey) -> &mut Self {
        self.oracle_stats = Some(oracle_stats);
        self
    }
    #[inline(always)]
    pub fn program_state(&mut self, program_state: solana_pubkey::Pubkey) -> &mut Self {
        self.program_state = Some(program_state);
        self
    }
    #[inline(always)]
    pub fn payer(&mut self, payer: solana_pubkey::Pubkey) -> &mut Self {
        self.payer = Some(payer);
        self
    }
    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }
    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }
    #[inline(always)]
    pub fn lut_signer(&mut self, lut_signer: solana_pubkey::Pubkey) -> &mut Self {
        self.lut_signer = Some(lut_signer);
        self
    }
    #[inline(always)]
    pub fn lut(&mut self, lut: solana_pubkey::Pubkey) -> &mut Self {
        self.lut = Some(lut);
        self
    }
    /// `[optional account, default to 'AddressLookupTab1e1111111111111111111111111']`
    #[inline(always)]
    pub fn address_lookup_table_program(
        &mut self,
        address_lookup_table_program: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.address_lookup_table_program = Some(address_lookup_table_program);
        self
    }
    #[inline(always)]
    pub fn recent_slot(&mut self, recent_slot: u64) -> &mut Self {
        self.recent_slot = Some(recent_slot);
        self
    }
    #[inline(always)]
    pub fn authority(&mut self, authority: Pubkey) -> &mut Self {
        self.authority = Some(authority);
        self
    }
    #[inline(always)]
    pub fn queue(&mut self, queue: Pubkey) -> &mut Self {
        self.queue = Some(queue);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn secp_authority(&mut self, secp_authority: [u8; 64]) -> &mut Self {
        self.secp_authority = Some(secp_authority);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = OracleInit {
            oracle: self.oracle.expect("oracle is not set"),
            oracle_stats: self.oracle_stats.expect("oracle_stats is not set"),
            program_state: self.program_state.expect("program_state is not set"),
            payer: self.payer.expect("payer is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_pubkey::pubkey!("11111111111111111111111111111111")),
            token_program: self.token_program.unwrap_or(solana_pubkey::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            lut_signer: self.lut_signer.expect("lut_signer is not set"),
            lut: self.lut.expect("lut is not set"),
            address_lookup_table_program: self.address_lookup_table_program.unwrap_or(
                solana_pubkey::pubkey!("AddressLookupTab1e1111111111111111111111111"),
            ),
        };
        let args = OracleInitInstructionArgs {
            recent_slot: self.recent_slot.clone().expect("recent_slot is not set"),
            authority: self.authority.clone().expect("authority is not set"),
            queue: self.queue.clone().expect("queue is not set"),
            secp_authority: self.secp_authority.clone(),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `oracle_init` CPI accounts.
pub struct OracleInitCpiAccounts<'a, 'b> {
    pub oracle: &'b solana_account_info::AccountInfo<'a>,

    pub oracle_stats: &'b solana_account_info::AccountInfo<'a>,

    pub program_state: &'b solana_account_info::AccountInfo<'a>,

    pub payer: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,

    pub token_program: &'b solana_account_info::AccountInfo<'a>,

    pub lut_signer: &'b solana_account_info::AccountInfo<'a>,

    pub lut: &'b solana_account_info::AccountInfo<'a>,

    pub address_lookup_table_program: &'b solana_account_info::AccountInfo<'a>,
}

/// `oracle_init` CPI instruction.
pub struct OracleInitCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,

    pub oracle: &'b solana_account_info::AccountInfo<'a>,

    pub oracle_stats: &'b solana_account_info::AccountInfo<'a>,

    pub program_state: &'b solana_account_info::AccountInfo<'a>,

    pub payer: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,

    pub token_program: &'b solana_account_info::AccountInfo<'a>,

    pub lut_signer: &'b solana_account_info::AccountInfo<'a>,

    pub lut: &'b solana_account_info::AccountInfo<'a>,

    pub address_lookup_table_program: &'b solana_account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: OracleInitInstructionArgs,
}

impl<'a, 'b> OracleInitCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: OracleInitCpiAccounts<'a, 'b>,
        args: OracleInitInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            oracle: accounts.oracle,
            oracle_stats: accounts.oracle_stats,
            program_state: accounts.program_state,
            payer: accounts.payer,
            system_program: accounts.system_program,
            token_program: accounts.token_program,
            lut_signer: accounts.lut_signer,
            lut: accounts.lut,
            address_lookup_table_program: accounts.address_lookup_table_program,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(9 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(*self.oracle.key, true));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.oracle_stats.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.program_state.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(*self.payer.key, true));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.lut_signer.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(*self.lut.key, false));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.address_lookup_table_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&OracleInitInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_instruction::Instruction {
            program_id: crate::SB_ON_DEMAND_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(10 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.oracle.clone());
        account_infos.push(self.oracle_stats.clone());
        account_infos.push(self.program_state.clone());
        account_infos.push(self.payer.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.token_program.clone());
        account_infos.push(self.lut_signer.clone());
        account_infos.push(self.lut.clone());
        account_infos.push(self.address_lookup_table_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `OracleInit` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` oracle
///   1. `[writable]` oracle_stats
///   2. `[writable]` program_state
///   3. `[writable, signer]` payer
///   4. `[]` system_program
///   5. `[]` token_program
///   6. `[]` lut_signer
///   7. `[writable]` lut
///   8. `[]` address_lookup_table_program
#[derive(Clone, Debug)]
pub struct OracleInitCpiBuilder<'a, 'b> {
    instruction: Box<OracleInitCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> OracleInitCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(OracleInitCpiBuilderInstruction {
            __program: program,
            oracle: None,
            oracle_stats: None,
            program_state: None,
            payer: None,
            system_program: None,
            token_program: None,
            lut_signer: None,
            lut: None,
            address_lookup_table_program: None,
            recent_slot: None,
            authority: None,
            queue: None,
            secp_authority: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn oracle(&mut self, oracle: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.oracle = Some(oracle);
        self
    }
    #[inline(always)]
    pub fn oracle_stats(
        &mut self,
        oracle_stats: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.oracle_stats = Some(oracle_stats);
        self
    }
    #[inline(always)]
    pub fn program_state(
        &mut self,
        program_state: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.program_state = Some(program_state);
        self
    }
    #[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.payer = Some(payer);
        self
    }
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }
    #[inline(always)]
    pub fn lut_signer(
        &mut self,
        lut_signer: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.lut_signer = Some(lut_signer);
        self
    }
    #[inline(always)]
    pub fn lut(&mut self, lut: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.lut = Some(lut);
        self
    }
    #[inline(always)]
    pub fn address_lookup_table_program(
        &mut self,
        address_lookup_table_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.address_lookup_table_program = Some(address_lookup_table_program);
        self
    }
    #[inline(always)]
    pub fn recent_slot(&mut self, recent_slot: u64) -> &mut Self {
        self.instruction.recent_slot = Some(recent_slot);
        self
    }
    #[inline(always)]
    pub fn authority(&mut self, authority: Pubkey) -> &mut Self {
        self.instruction.authority = Some(authority);
        self
    }
    #[inline(always)]
    pub fn queue(&mut self, queue: Pubkey) -> &mut Self {
        self.instruction.queue = Some(queue);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn secp_authority(&mut self, secp_authority: [u8; 64]) -> &mut Self {
        self.instruction.secp_authority = Some(secp_authority);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        let args = OracleInitInstructionArgs {
            recent_slot: self
                .instruction
                .recent_slot
                .clone()
                .expect("recent_slot is not set"),
            authority: self
                .instruction
                .authority
                .clone()
                .expect("authority is not set"),
            queue: self.instruction.queue.clone().expect("queue is not set"),
            secp_authority: self.instruction.secp_authority.clone(),
        };
        let instruction = OracleInitCpi {
            __program: self.instruction.__program,

            oracle: self.instruction.oracle.expect("oracle is not set"),

            oracle_stats: self
                .instruction
                .oracle_stats
                .expect("oracle_stats is not set"),

            program_state: self
                .instruction
                .program_state
                .expect("program_state is not set"),

            payer: self.instruction.payer.expect("payer is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),

            lut_signer: self.instruction.lut_signer.expect("lut_signer is not set"),

            lut: self.instruction.lut.expect("lut is not set"),

            address_lookup_table_program: self
                .instruction
                .address_lookup_table_program
                .expect("address_lookup_table_program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct OracleInitCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    oracle: Option<&'b solana_account_info::AccountInfo<'a>>,
    oracle_stats: Option<&'b solana_account_info::AccountInfo<'a>>,
    program_state: Option<&'b solana_account_info::AccountInfo<'a>>,
    payer: Option<&'b solana_account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    lut_signer: Option<&'b solana_account_info::AccountInfo<'a>>,
    lut: Option<&'b solana_account_info::AccountInfo<'a>>,
    address_lookup_table_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    recent_slot: Option<u64>,
    authority: Option<Pubkey>,
    queue: Option<Pubkey>,
    secp_authority: Option<[u8; 64]>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
