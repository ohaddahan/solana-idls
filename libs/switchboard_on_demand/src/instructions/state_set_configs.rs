//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;
use solana_pubkey::Pubkey;

/// Accounts.
#[derive(Debug)]
pub struct StateSetConfigs {
    pub state: solana_pubkey::Pubkey,

    pub authority: solana_pubkey::Pubkey,

    pub queue: solana_pubkey::Pubkey,

    pub payer: solana_pubkey::Pubkey,

    pub system_program: solana_pubkey::Pubkey,
}

impl StateSetConfigs {
    pub fn instruction(
        &self,
        args: StateSetConfigsInstructionArgs,
    ) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: StateSetConfigsInstructionArgs,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(5 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(self.state, false));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.authority,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.queue, false));
        accounts.push(solana_instruction::AccountMeta::new(self.payer, true));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&StateSetConfigsInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_instruction::Instruction {
            program_id: crate::SB_ON_DEMAND_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct StateSetConfigsInstructionData {
    discriminator: [u8; 8],
}

impl StateSetConfigsInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [40, 98, 76, 37, 206, 9, 47, 144],
        }
    }
}

impl Default for StateSetConfigsInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct StateSetConfigsInstructionArgs {
    pub new_authority: Pubkey,
    pub test_only_disable_mr_enclave_check: u8,
    pub add_advisory: u16,
    pub rm_advisory: u16,
    pub switch_mint: Pubkey,
    pub subsidy_amount: u64,
    pub base_reward: u32,
    pub add_cost_wl: Pubkey,
    pub rm_cost_wl: Pubkey,
}

/// Instruction builder for `StateSetConfigs`.
///
/// ### Accounts:
///
///   0. `[writable]` state
///   1. `[signer]` authority
///   2. `[writable]` queue
///   3. `[writable, signer]` payer
///   4. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct StateSetConfigsBuilder {
    state: Option<solana_pubkey::Pubkey>,
    authority: Option<solana_pubkey::Pubkey>,
    queue: Option<solana_pubkey::Pubkey>,
    payer: Option<solana_pubkey::Pubkey>,
    system_program: Option<solana_pubkey::Pubkey>,
    new_authority: Option<Pubkey>,
    test_only_disable_mr_enclave_check: Option<u8>,
    add_advisory: Option<u16>,
    rm_advisory: Option<u16>,
    switch_mint: Option<Pubkey>,
    subsidy_amount: Option<u64>,
    base_reward: Option<u32>,
    add_cost_wl: Option<Pubkey>,
    rm_cost_wl: Option<Pubkey>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl StateSetConfigsBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn state(&mut self, state: solana_pubkey::Pubkey) -> &mut Self {
        self.state = Some(state);
        self
    }
    #[inline(always)]
    pub fn authority(&mut self, authority: solana_pubkey::Pubkey) -> &mut Self {
        self.authority = Some(authority);
        self
    }
    #[inline(always)]
    pub fn queue(&mut self, queue: solana_pubkey::Pubkey) -> &mut Self {
        self.queue = Some(queue);
        self
    }
    #[inline(always)]
    pub fn payer(&mut self, payer: solana_pubkey::Pubkey) -> &mut Self {
        self.payer = Some(payer);
        self
    }
    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }
    #[inline(always)]
    pub fn new_authority(&mut self, new_authority: Pubkey) -> &mut Self {
        self.new_authority = Some(new_authority);
        self
    }
    #[inline(always)]
    pub fn test_only_disable_mr_enclave_check(
        &mut self,
        test_only_disable_mr_enclave_check: u8,
    ) -> &mut Self {
        self.test_only_disable_mr_enclave_check = Some(test_only_disable_mr_enclave_check);
        self
    }
    #[inline(always)]
    pub fn add_advisory(&mut self, add_advisory: u16) -> &mut Self {
        self.add_advisory = Some(add_advisory);
        self
    }
    #[inline(always)]
    pub fn rm_advisory(&mut self, rm_advisory: u16) -> &mut Self {
        self.rm_advisory = Some(rm_advisory);
        self
    }
    #[inline(always)]
    pub fn switch_mint(&mut self, switch_mint: Pubkey) -> &mut Self {
        self.switch_mint = Some(switch_mint);
        self
    }
    #[inline(always)]
    pub fn subsidy_amount(&mut self, subsidy_amount: u64) -> &mut Self {
        self.subsidy_amount = Some(subsidy_amount);
        self
    }
    #[inline(always)]
    pub fn base_reward(&mut self, base_reward: u32) -> &mut Self {
        self.base_reward = Some(base_reward);
        self
    }
    #[inline(always)]
    pub fn add_cost_wl(&mut self, add_cost_wl: Pubkey) -> &mut Self {
        self.add_cost_wl = Some(add_cost_wl);
        self
    }
    #[inline(always)]
    pub fn rm_cost_wl(&mut self, rm_cost_wl: Pubkey) -> &mut Self {
        self.rm_cost_wl = Some(rm_cost_wl);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = StateSetConfigs {
            state: self.state.expect("state is not set"),
            authority: self.authority.expect("authority is not set"),
            queue: self.queue.expect("queue is not set"),
            payer: self.payer.expect("payer is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_pubkey::pubkey!("11111111111111111111111111111111")),
        };
        let args = StateSetConfigsInstructionArgs {
            new_authority: self
                .new_authority
                .clone()
                .expect("new_authority is not set"),
            test_only_disable_mr_enclave_check: self
                .test_only_disable_mr_enclave_check
                .clone()
                .expect("test_only_disable_mr_enclave_check is not set"),
            add_advisory: self.add_advisory.clone().expect("add_advisory is not set"),
            rm_advisory: self.rm_advisory.clone().expect("rm_advisory is not set"),
            switch_mint: self.switch_mint.clone().expect("switch_mint is not set"),
            subsidy_amount: self
                .subsidy_amount
                .clone()
                .expect("subsidy_amount is not set"),
            base_reward: self.base_reward.clone().expect("base_reward is not set"),
            add_cost_wl: self.add_cost_wl.clone().expect("add_cost_wl is not set"),
            rm_cost_wl: self.rm_cost_wl.clone().expect("rm_cost_wl is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `state_set_configs` CPI accounts.
pub struct StateSetConfigsCpiAccounts<'a, 'b> {
    pub state: &'b solana_account_info::AccountInfo<'a>,

    pub authority: &'b solana_account_info::AccountInfo<'a>,

    pub queue: &'b solana_account_info::AccountInfo<'a>,

    pub payer: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,
}

/// `state_set_configs` CPI instruction.
pub struct StateSetConfigsCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,

    pub state: &'b solana_account_info::AccountInfo<'a>,

    pub authority: &'b solana_account_info::AccountInfo<'a>,

    pub queue: &'b solana_account_info::AccountInfo<'a>,

    pub payer: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: StateSetConfigsInstructionArgs,
}

impl<'a, 'b> StateSetConfigsCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: StateSetConfigsCpiAccounts<'a, 'b>,
        args: StateSetConfigsInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            state: accounts.state,
            authority: accounts.authority,
            queue: accounts.queue,
            payer: accounts.payer,
            system_program: accounts.system_program,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(5 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(*self.state.key, false));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.authority.key,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new(*self.queue.key, false));
        accounts.push(solana_instruction::AccountMeta::new(*self.payer.key, true));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&StateSetConfigsInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_instruction::Instruction {
            program_id: crate::SB_ON_DEMAND_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(6 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.state.clone());
        account_infos.push(self.authority.clone());
        account_infos.push(self.queue.clone());
        account_infos.push(self.payer.clone());
        account_infos.push(self.system_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `StateSetConfigs` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` state
///   1. `[signer]` authority
///   2. `[writable]` queue
///   3. `[writable, signer]` payer
///   4. `[]` system_program
#[derive(Clone, Debug)]
pub struct StateSetConfigsCpiBuilder<'a, 'b> {
    instruction: Box<StateSetConfigsCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> StateSetConfigsCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(StateSetConfigsCpiBuilderInstruction {
            __program: program,
            state: None,
            authority: None,
            queue: None,
            payer: None,
            system_program: None,
            new_authority: None,
            test_only_disable_mr_enclave_check: None,
            add_advisory: None,
            rm_advisory: None,
            switch_mint: None,
            subsidy_amount: None,
            base_reward: None,
            add_cost_wl: None,
            rm_cost_wl: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn state(&mut self, state: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.state = Some(state);
        self
    }
    #[inline(always)]
    pub fn authority(&mut self, authority: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.authority = Some(authority);
        self
    }
    #[inline(always)]
    pub fn queue(&mut self, queue: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.queue = Some(queue);
        self
    }
    #[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.payer = Some(payer);
        self
    }
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }
    #[inline(always)]
    pub fn new_authority(&mut self, new_authority: Pubkey) -> &mut Self {
        self.instruction.new_authority = Some(new_authority);
        self
    }
    #[inline(always)]
    pub fn test_only_disable_mr_enclave_check(
        &mut self,
        test_only_disable_mr_enclave_check: u8,
    ) -> &mut Self {
        self.instruction.test_only_disable_mr_enclave_check =
            Some(test_only_disable_mr_enclave_check);
        self
    }
    #[inline(always)]
    pub fn add_advisory(&mut self, add_advisory: u16) -> &mut Self {
        self.instruction.add_advisory = Some(add_advisory);
        self
    }
    #[inline(always)]
    pub fn rm_advisory(&mut self, rm_advisory: u16) -> &mut Self {
        self.instruction.rm_advisory = Some(rm_advisory);
        self
    }
    #[inline(always)]
    pub fn switch_mint(&mut self, switch_mint: Pubkey) -> &mut Self {
        self.instruction.switch_mint = Some(switch_mint);
        self
    }
    #[inline(always)]
    pub fn subsidy_amount(&mut self, subsidy_amount: u64) -> &mut Self {
        self.instruction.subsidy_amount = Some(subsidy_amount);
        self
    }
    #[inline(always)]
    pub fn base_reward(&mut self, base_reward: u32) -> &mut Self {
        self.instruction.base_reward = Some(base_reward);
        self
    }
    #[inline(always)]
    pub fn add_cost_wl(&mut self, add_cost_wl: Pubkey) -> &mut Self {
        self.instruction.add_cost_wl = Some(add_cost_wl);
        self
    }
    #[inline(always)]
    pub fn rm_cost_wl(&mut self, rm_cost_wl: Pubkey) -> &mut Self {
        self.instruction.rm_cost_wl = Some(rm_cost_wl);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        let args = StateSetConfigsInstructionArgs {
            new_authority: self
                .instruction
                .new_authority
                .clone()
                .expect("new_authority is not set"),
            test_only_disable_mr_enclave_check: self
                .instruction
                .test_only_disable_mr_enclave_check
                .clone()
                .expect("test_only_disable_mr_enclave_check is not set"),
            add_advisory: self
                .instruction
                .add_advisory
                .clone()
                .expect("add_advisory is not set"),
            rm_advisory: self
                .instruction
                .rm_advisory
                .clone()
                .expect("rm_advisory is not set"),
            switch_mint: self
                .instruction
                .switch_mint
                .clone()
                .expect("switch_mint is not set"),
            subsidy_amount: self
                .instruction
                .subsidy_amount
                .clone()
                .expect("subsidy_amount is not set"),
            base_reward: self
                .instruction
                .base_reward
                .clone()
                .expect("base_reward is not set"),
            add_cost_wl: self
                .instruction
                .add_cost_wl
                .clone()
                .expect("add_cost_wl is not set"),
            rm_cost_wl: self
                .instruction
                .rm_cost_wl
                .clone()
                .expect("rm_cost_wl is not set"),
        };
        let instruction = StateSetConfigsCpi {
            __program: self.instruction.__program,

            state: self.instruction.state.expect("state is not set"),

            authority: self.instruction.authority.expect("authority is not set"),

            queue: self.instruction.queue.expect("queue is not set"),

            payer: self.instruction.payer.expect("payer is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct StateSetConfigsCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    state: Option<&'b solana_account_info::AccountInfo<'a>>,
    authority: Option<&'b solana_account_info::AccountInfo<'a>>,
    queue: Option<&'b solana_account_info::AccountInfo<'a>>,
    payer: Option<&'b solana_account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    new_authority: Option<Pubkey>,
    test_only_disable_mr_enclave_check: Option<u8>,
    add_advisory: Option<u16>,
    rm_advisory: Option<u16>,
    switch_mint: Option<Pubkey>,
    subsidy_amount: Option<u64>,
    base_reward: Option<u32>,
    add_cost_wl: Option<Pubkey>,
    rm_cost_wl: Option<Pubkey>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
