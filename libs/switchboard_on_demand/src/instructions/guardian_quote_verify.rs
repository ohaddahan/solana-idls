//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;
use solana_pubkey::Pubkey;

/// Accounts.
#[derive(Debug)]
pub struct GuardianQuoteVerify {
    pub guardian: solana_pubkey::Pubkey,

    pub oracle: solana_pubkey::Pubkey,

    pub authority: solana_pubkey::Pubkey,

    pub guardian_queue: solana_pubkey::Pubkey,

    pub state: solana_pubkey::Pubkey,

    pub recent_slothashes: solana_pubkey::Pubkey,
}

impl GuardianQuoteVerify {
    pub fn instruction(
        &self,
        args: GuardianQuoteVerifyInstructionArgs,
    ) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: GuardianQuoteVerifyInstructionArgs,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(6 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(self.guardian, false));
        accounts.push(solana_instruction::AccountMeta::new(self.oracle, false));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.authority,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.guardian_queue,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.state, false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.recent_slothashes,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&GuardianQuoteVerifyInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_instruction::Instruction {
            program_id: crate::SB_ON_DEMAND_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct GuardianQuoteVerifyInstructionData {
    discriminator: [u8; 8],
}

impl GuardianQuoteVerifyInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [168, 36, 93, 156, 157, 150, 148, 45],
        }
    }
}

impl Default for GuardianQuoteVerifyInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct GuardianQuoteVerifyInstructionArgs {
    pub timestamp: i64,
    pub mr_enclave: [u8; 32],
    pub reserved1: u32,
    pub ed25519_key: Pubkey,
    pub secp256k1_key: [u8; 64],
    pub slot: u64,
    pub signature: [u8; 64],
    pub recovery_id: u8,
    pub advisories: Vec<u32>,
}

/// Instruction builder for `GuardianQuoteVerify`.
///
/// ### Accounts:
///
///   0. `[writable]` guardian
///   1. `[writable]` oracle
///   2. `[signer]` authority
///   3. `[writable]` guardian_queue
///   4. `[]` state
///   5. `[optional]` recent_slothashes (default to `SysvarS1otHashes111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct GuardianQuoteVerifyBuilder {
    guardian: Option<solana_pubkey::Pubkey>,
    oracle: Option<solana_pubkey::Pubkey>,
    authority: Option<solana_pubkey::Pubkey>,
    guardian_queue: Option<solana_pubkey::Pubkey>,
    state: Option<solana_pubkey::Pubkey>,
    recent_slothashes: Option<solana_pubkey::Pubkey>,
    timestamp: Option<i64>,
    mr_enclave: Option<[u8; 32]>,
    reserved1: Option<u32>,
    ed25519_key: Option<Pubkey>,
    secp256k1_key: Option<[u8; 64]>,
    slot: Option<u64>,
    signature: Option<[u8; 64]>,
    recovery_id: Option<u8>,
    advisories: Option<Vec<u32>>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl GuardianQuoteVerifyBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn guardian(&mut self, guardian: solana_pubkey::Pubkey) -> &mut Self {
        self.guardian = Some(guardian);
        self
    }
    #[inline(always)]
    pub fn oracle(&mut self, oracle: solana_pubkey::Pubkey) -> &mut Self {
        self.oracle = Some(oracle);
        self
    }
    #[inline(always)]
    pub fn authority(&mut self, authority: solana_pubkey::Pubkey) -> &mut Self {
        self.authority = Some(authority);
        self
    }
    #[inline(always)]
    pub fn guardian_queue(&mut self, guardian_queue: solana_pubkey::Pubkey) -> &mut Self {
        self.guardian_queue = Some(guardian_queue);
        self
    }
    #[inline(always)]
    pub fn state(&mut self, state: solana_pubkey::Pubkey) -> &mut Self {
        self.state = Some(state);
        self
    }
    /// `[optional account, default to 'SysvarS1otHashes111111111111111111111111111']`
    #[inline(always)]
    pub fn recent_slothashes(&mut self, recent_slothashes: solana_pubkey::Pubkey) -> &mut Self {
        self.recent_slothashes = Some(recent_slothashes);
        self
    }
    #[inline(always)]
    pub fn timestamp(&mut self, timestamp: i64) -> &mut Self {
        self.timestamp = Some(timestamp);
        self
    }
    #[inline(always)]
    pub fn mr_enclave(&mut self, mr_enclave: [u8; 32]) -> &mut Self {
        self.mr_enclave = Some(mr_enclave);
        self
    }
    #[inline(always)]
    pub fn reserved1(&mut self, reserved1: u32) -> &mut Self {
        self.reserved1 = Some(reserved1);
        self
    }
    #[inline(always)]
    pub fn ed25519_key(&mut self, ed25519_key: Pubkey) -> &mut Self {
        self.ed25519_key = Some(ed25519_key);
        self
    }
    #[inline(always)]
    pub fn secp256k1_key(&mut self, secp256k1_key: [u8; 64]) -> &mut Self {
        self.secp256k1_key = Some(secp256k1_key);
        self
    }
    #[inline(always)]
    pub fn slot(&mut self, slot: u64) -> &mut Self {
        self.slot = Some(slot);
        self
    }
    #[inline(always)]
    pub fn signature(&mut self, signature: [u8; 64]) -> &mut Self {
        self.signature = Some(signature);
        self
    }
    #[inline(always)]
    pub fn recovery_id(&mut self, recovery_id: u8) -> &mut Self {
        self.recovery_id = Some(recovery_id);
        self
    }
    #[inline(always)]
    pub fn advisories(&mut self, advisories: Vec<u32>) -> &mut Self {
        self.advisories = Some(advisories);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = GuardianQuoteVerify {
            guardian: self.guardian.expect("guardian is not set"),
            oracle: self.oracle.expect("oracle is not set"),
            authority: self.authority.expect("authority is not set"),
            guardian_queue: self.guardian_queue.expect("guardian_queue is not set"),
            state: self.state.expect("state is not set"),
            recent_slothashes: self.recent_slothashes.unwrap_or(solana_pubkey::pubkey!(
                "SysvarS1otHashes111111111111111111111111111"
            )),
        };
        let args = GuardianQuoteVerifyInstructionArgs {
            timestamp: self.timestamp.clone().expect("timestamp is not set"),
            mr_enclave: self.mr_enclave.clone().expect("mr_enclave is not set"),
            reserved1: self.reserved1.clone().expect("reserved1 is not set"),
            ed25519_key: self.ed25519_key.clone().expect("ed25519_key is not set"),
            secp256k1_key: self
                .secp256k1_key
                .clone()
                .expect("secp256k1_key is not set"),
            slot: self.slot.clone().expect("slot is not set"),
            signature: self.signature.clone().expect("signature is not set"),
            recovery_id: self.recovery_id.clone().expect("recovery_id is not set"),
            advisories: self.advisories.clone().expect("advisories is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `guardian_quote_verify` CPI accounts.
pub struct GuardianQuoteVerifyCpiAccounts<'a, 'b> {
    pub guardian: &'b solana_account_info::AccountInfo<'a>,

    pub oracle: &'b solana_account_info::AccountInfo<'a>,

    pub authority: &'b solana_account_info::AccountInfo<'a>,

    pub guardian_queue: &'b solana_account_info::AccountInfo<'a>,

    pub state: &'b solana_account_info::AccountInfo<'a>,

    pub recent_slothashes: &'b solana_account_info::AccountInfo<'a>,
}

/// `guardian_quote_verify` CPI instruction.
pub struct GuardianQuoteVerifyCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,

    pub guardian: &'b solana_account_info::AccountInfo<'a>,

    pub oracle: &'b solana_account_info::AccountInfo<'a>,

    pub authority: &'b solana_account_info::AccountInfo<'a>,

    pub guardian_queue: &'b solana_account_info::AccountInfo<'a>,

    pub state: &'b solana_account_info::AccountInfo<'a>,

    pub recent_slothashes: &'b solana_account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: GuardianQuoteVerifyInstructionArgs,
}

impl<'a, 'b> GuardianQuoteVerifyCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: GuardianQuoteVerifyCpiAccounts<'a, 'b>,
        args: GuardianQuoteVerifyInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            guardian: accounts.guardian,
            oracle: accounts.oracle,
            authority: accounts.authority,
            guardian_queue: accounts.guardian_queue,
            state: accounts.state,
            recent_slothashes: accounts.recent_slothashes,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(6 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(
            *self.guardian.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.oracle.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.authority.key,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.guardian_queue.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.state.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.recent_slothashes.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&GuardianQuoteVerifyInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_instruction::Instruction {
            program_id: crate::SB_ON_DEMAND_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(7 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.guardian.clone());
        account_infos.push(self.oracle.clone());
        account_infos.push(self.authority.clone());
        account_infos.push(self.guardian_queue.clone());
        account_infos.push(self.state.clone());
        account_infos.push(self.recent_slothashes.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `GuardianQuoteVerify` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` guardian
///   1. `[writable]` oracle
///   2. `[signer]` authority
///   3. `[writable]` guardian_queue
///   4. `[]` state
///   5. `[]` recent_slothashes
#[derive(Clone, Debug)]
pub struct GuardianQuoteVerifyCpiBuilder<'a, 'b> {
    instruction: Box<GuardianQuoteVerifyCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> GuardianQuoteVerifyCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(GuardianQuoteVerifyCpiBuilderInstruction {
            __program: program,
            guardian: None,
            oracle: None,
            authority: None,
            guardian_queue: None,
            state: None,
            recent_slothashes: None,
            timestamp: None,
            mr_enclave: None,
            reserved1: None,
            ed25519_key: None,
            secp256k1_key: None,
            slot: None,
            signature: None,
            recovery_id: None,
            advisories: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn guardian(&mut self, guardian: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.guardian = Some(guardian);
        self
    }
    #[inline(always)]
    pub fn oracle(&mut self, oracle: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.oracle = Some(oracle);
        self
    }
    #[inline(always)]
    pub fn authority(&mut self, authority: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.authority = Some(authority);
        self
    }
    #[inline(always)]
    pub fn guardian_queue(
        &mut self,
        guardian_queue: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.guardian_queue = Some(guardian_queue);
        self
    }
    #[inline(always)]
    pub fn state(&mut self, state: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.state = Some(state);
        self
    }
    #[inline(always)]
    pub fn recent_slothashes(
        &mut self,
        recent_slothashes: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.recent_slothashes = Some(recent_slothashes);
        self
    }
    #[inline(always)]
    pub fn timestamp(&mut self, timestamp: i64) -> &mut Self {
        self.instruction.timestamp = Some(timestamp);
        self
    }
    #[inline(always)]
    pub fn mr_enclave(&mut self, mr_enclave: [u8; 32]) -> &mut Self {
        self.instruction.mr_enclave = Some(mr_enclave);
        self
    }
    #[inline(always)]
    pub fn reserved1(&mut self, reserved1: u32) -> &mut Self {
        self.instruction.reserved1 = Some(reserved1);
        self
    }
    #[inline(always)]
    pub fn ed25519_key(&mut self, ed25519_key: Pubkey) -> &mut Self {
        self.instruction.ed25519_key = Some(ed25519_key);
        self
    }
    #[inline(always)]
    pub fn secp256k1_key(&mut self, secp256k1_key: [u8; 64]) -> &mut Self {
        self.instruction.secp256k1_key = Some(secp256k1_key);
        self
    }
    #[inline(always)]
    pub fn slot(&mut self, slot: u64) -> &mut Self {
        self.instruction.slot = Some(slot);
        self
    }
    #[inline(always)]
    pub fn signature(&mut self, signature: [u8; 64]) -> &mut Self {
        self.instruction.signature = Some(signature);
        self
    }
    #[inline(always)]
    pub fn recovery_id(&mut self, recovery_id: u8) -> &mut Self {
        self.instruction.recovery_id = Some(recovery_id);
        self
    }
    #[inline(always)]
    pub fn advisories(&mut self, advisories: Vec<u32>) -> &mut Self {
        self.instruction.advisories = Some(advisories);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        let args = GuardianQuoteVerifyInstructionArgs {
            timestamp: self
                .instruction
                .timestamp
                .clone()
                .expect("timestamp is not set"),
            mr_enclave: self
                .instruction
                .mr_enclave
                .clone()
                .expect("mr_enclave is not set"),
            reserved1: self
                .instruction
                .reserved1
                .clone()
                .expect("reserved1 is not set"),
            ed25519_key: self
                .instruction
                .ed25519_key
                .clone()
                .expect("ed25519_key is not set"),
            secp256k1_key: self
                .instruction
                .secp256k1_key
                .clone()
                .expect("secp256k1_key is not set"),
            slot: self.instruction.slot.clone().expect("slot is not set"),
            signature: self
                .instruction
                .signature
                .clone()
                .expect("signature is not set"),
            recovery_id: self
                .instruction
                .recovery_id
                .clone()
                .expect("recovery_id is not set"),
            advisories: self
                .instruction
                .advisories
                .clone()
                .expect("advisories is not set"),
        };
        let instruction = GuardianQuoteVerifyCpi {
            __program: self.instruction.__program,

            guardian: self.instruction.guardian.expect("guardian is not set"),

            oracle: self.instruction.oracle.expect("oracle is not set"),

            authority: self.instruction.authority.expect("authority is not set"),

            guardian_queue: self
                .instruction
                .guardian_queue
                .expect("guardian_queue is not set"),

            state: self.instruction.state.expect("state is not set"),

            recent_slothashes: self
                .instruction
                .recent_slothashes
                .expect("recent_slothashes is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct GuardianQuoteVerifyCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    guardian: Option<&'b solana_account_info::AccountInfo<'a>>,
    oracle: Option<&'b solana_account_info::AccountInfo<'a>>,
    authority: Option<&'b solana_account_info::AccountInfo<'a>>,
    guardian_queue: Option<&'b solana_account_info::AccountInfo<'a>>,
    state: Option<&'b solana_account_info::AccountInfo<'a>>,
    recent_slothashes: Option<&'b solana_account_info::AccountInfo<'a>>,
    timestamp: Option<i64>,
    mr_enclave: Option<[u8; 32]>,
    reserved1: Option<u32>,
    ed25519_key: Option<Pubkey>,
    secp256k1_key: Option<[u8; 64]>,
    slot: Option<u64>,
    signature: Option<[u8; 64]>,
    recovery_id: Option<u8>,
    advisories: Option<Vec<u32>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
