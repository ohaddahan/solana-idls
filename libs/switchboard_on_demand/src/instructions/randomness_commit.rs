//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
#[derive(Debug)]
pub struct RandomnessCommit {
    pub randomness: solana_pubkey::Pubkey,

    pub queue: solana_pubkey::Pubkey,

    pub oracle: solana_pubkey::Pubkey,

    pub recent_slothashes: solana_pubkey::Pubkey,

    pub authority: solana_pubkey::Pubkey,
}

impl RandomnessCommit {
    pub fn instruction(&self) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(5 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(self.randomness, false));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.queue, false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.oracle, false));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.recent_slothashes,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.authority,
            true,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = borsh::to_vec(&RandomnessCommitInstructionData::new()).unwrap();

        solana_instruction::Instruction {
            program_id: crate::SB_ON_DEMAND_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct RandomnessCommitInstructionData {
    discriminator: [u8; 8],
}

impl RandomnessCommitInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [52, 170, 152, 201, 179, 133, 242, 141],
        }
    }
}

impl Default for RandomnessCommitInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

/// Instruction builder for `RandomnessCommit`.
///
/// ### Accounts:
///
///   0. `[writable]` randomness
///   1. `[]` queue
///   2. `[writable]` oracle
///   3. `[optional]` recent_slothashes (default to `SysvarS1otHashes111111111111111111111111111`)
///   4. `[signer]` authority
#[derive(Clone, Debug, Default)]
pub struct RandomnessCommitBuilder {
    randomness: Option<solana_pubkey::Pubkey>,
    queue: Option<solana_pubkey::Pubkey>,
    oracle: Option<solana_pubkey::Pubkey>,
    recent_slothashes: Option<solana_pubkey::Pubkey>,
    authority: Option<solana_pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl RandomnessCommitBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn randomness(&mut self, randomness: solana_pubkey::Pubkey) -> &mut Self {
        self.randomness = Some(randomness);
        self
    }
    #[inline(always)]
    pub fn queue(&mut self, queue: solana_pubkey::Pubkey) -> &mut Self {
        self.queue = Some(queue);
        self
    }
    #[inline(always)]
    pub fn oracle(&mut self, oracle: solana_pubkey::Pubkey) -> &mut Self {
        self.oracle = Some(oracle);
        self
    }
    /// `[optional account, default to 'SysvarS1otHashes111111111111111111111111111']`
    #[inline(always)]
    pub fn recent_slothashes(&mut self, recent_slothashes: solana_pubkey::Pubkey) -> &mut Self {
        self.recent_slothashes = Some(recent_slothashes);
        self
    }
    #[inline(always)]
    pub fn authority(&mut self, authority: solana_pubkey::Pubkey) -> &mut Self {
        self.authority = Some(authority);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = RandomnessCommit {
            randomness: self.randomness.expect("randomness is not set"),
            queue: self.queue.expect("queue is not set"),
            oracle: self.oracle.expect("oracle is not set"),
            recent_slothashes: self.recent_slothashes.unwrap_or(solana_pubkey::pubkey!(
                "SysvarS1otHashes111111111111111111111111111"
            )),
            authority: self.authority.expect("authority is not set"),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `randomness_commit` CPI accounts.
pub struct RandomnessCommitCpiAccounts<'a, 'b> {
    pub randomness: &'b solana_account_info::AccountInfo<'a>,

    pub queue: &'b solana_account_info::AccountInfo<'a>,

    pub oracle: &'b solana_account_info::AccountInfo<'a>,

    pub recent_slothashes: &'b solana_account_info::AccountInfo<'a>,

    pub authority: &'b solana_account_info::AccountInfo<'a>,
}

/// `randomness_commit` CPI instruction.
pub struct RandomnessCommitCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,

    pub randomness: &'b solana_account_info::AccountInfo<'a>,

    pub queue: &'b solana_account_info::AccountInfo<'a>,

    pub oracle: &'b solana_account_info::AccountInfo<'a>,

    pub recent_slothashes: &'b solana_account_info::AccountInfo<'a>,

    pub authority: &'b solana_account_info::AccountInfo<'a>,
}

impl<'a, 'b> RandomnessCommitCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: RandomnessCommitCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            randomness: accounts.randomness,
            queue: accounts.queue,
            oracle: accounts.oracle,
            recent_slothashes: accounts.recent_slothashes,
            authority: accounts.authority,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(5 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(
            *self.randomness.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.queue.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.oracle.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.recent_slothashes.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.authority.key,
            true,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = borsh::to_vec(&RandomnessCommitInstructionData::new()).unwrap();

        let instruction = solana_instruction::Instruction {
            program_id: crate::SB_ON_DEMAND_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(6 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.randomness.clone());
        account_infos.push(self.queue.clone());
        account_infos.push(self.oracle.clone());
        account_infos.push(self.recent_slothashes.clone());
        account_infos.push(self.authority.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `RandomnessCommit` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` randomness
///   1. `[]` queue
///   2. `[writable]` oracle
///   3. `[]` recent_slothashes
///   4. `[signer]` authority
#[derive(Clone, Debug)]
pub struct RandomnessCommitCpiBuilder<'a, 'b> {
    instruction: Box<RandomnessCommitCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> RandomnessCommitCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(RandomnessCommitCpiBuilderInstruction {
            __program: program,
            randomness: None,
            queue: None,
            oracle: None,
            recent_slothashes: None,
            authority: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn randomness(
        &mut self,
        randomness: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.randomness = Some(randomness);
        self
    }
    #[inline(always)]
    pub fn queue(&mut self, queue: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.queue = Some(queue);
        self
    }
    #[inline(always)]
    pub fn oracle(&mut self, oracle: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.oracle = Some(oracle);
        self
    }
    #[inline(always)]
    pub fn recent_slothashes(
        &mut self,
        recent_slothashes: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.recent_slothashes = Some(recent_slothashes);
        self
    }
    #[inline(always)]
    pub fn authority(&mut self, authority: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.authority = Some(authority);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        let instruction = RandomnessCommitCpi {
            __program: self.instruction.__program,

            randomness: self.instruction.randomness.expect("randomness is not set"),

            queue: self.instruction.queue.expect("queue is not set"),

            oracle: self.instruction.oracle.expect("oracle is not set"),

            recent_slothashes: self
                .instruction
                .recent_slothashes
                .expect("recent_slothashes is not set"),

            authority: self.instruction.authority.expect("authority is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct RandomnessCommitCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    randomness: Option<&'b solana_account_info::AccountInfo<'a>>,
    queue: Option<&'b solana_account_info::AccountInfo<'a>>,
    oracle: Option<&'b solana_account_info::AccountInfo<'a>>,
    recent_slothashes: Option<&'b solana_account_info::AccountInfo<'a>>,
    authority: Option<&'b solana_account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
