//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
#[derive(Debug)]
pub struct QueueRemoveMrEnclave {
    pub queue: solana_pubkey::Pubkey,

    pub authority: solana_pubkey::Pubkey,

    pub program_authority: solana_pubkey::Pubkey,

    pub state: solana_pubkey::Pubkey,
}

impl QueueRemoveMrEnclave {
    pub fn instruction(
        &self,
        args: QueueRemoveMrEnclaveInstructionArgs,
    ) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: QueueRemoveMrEnclaveInstructionArgs,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(4 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(self.queue, false));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.authority,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.program_authority,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.state, false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&QueueRemoveMrEnclaveInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_instruction::Instruction {
            program_id: crate::SB_ON_DEMAND_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct QueueRemoveMrEnclaveInstructionData {
    discriminator: [u8; 8],
}

impl QueueRemoveMrEnclaveInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [3, 64, 135, 33, 190, 133, 68, 252],
        }
    }
}

impl Default for QueueRemoveMrEnclaveInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct QueueRemoveMrEnclaveInstructionArgs {
    pub mr_enclave: [u8; 32],
}

/// Instruction builder for `QueueRemoveMrEnclave`.
///
/// ### Accounts:
///
///   0. `[writable]` queue
///   1. `[signer]` authority
///   2. `[]` program_authority
///   3. `[]` state
#[derive(Clone, Debug, Default)]
pub struct QueueRemoveMrEnclaveBuilder {
    queue: Option<solana_pubkey::Pubkey>,
    authority: Option<solana_pubkey::Pubkey>,
    program_authority: Option<solana_pubkey::Pubkey>,
    state: Option<solana_pubkey::Pubkey>,
    mr_enclave: Option<[u8; 32]>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl QueueRemoveMrEnclaveBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn queue(&mut self, queue: solana_pubkey::Pubkey) -> &mut Self {
        self.queue = Some(queue);
        self
    }
    #[inline(always)]
    pub fn authority(&mut self, authority: solana_pubkey::Pubkey) -> &mut Self {
        self.authority = Some(authority);
        self
    }
    #[inline(always)]
    pub fn program_authority(&mut self, program_authority: solana_pubkey::Pubkey) -> &mut Self {
        self.program_authority = Some(program_authority);
        self
    }
    #[inline(always)]
    pub fn state(&mut self, state: solana_pubkey::Pubkey) -> &mut Self {
        self.state = Some(state);
        self
    }
    #[inline(always)]
    pub fn mr_enclave(&mut self, mr_enclave: [u8; 32]) -> &mut Self {
        self.mr_enclave = Some(mr_enclave);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = QueueRemoveMrEnclave {
            queue: self.queue.expect("queue is not set"),
            authority: self.authority.expect("authority is not set"),
            program_authority: self
                .program_authority
                .expect("program_authority is not set"),
            state: self.state.expect("state is not set"),
        };
        let args = QueueRemoveMrEnclaveInstructionArgs {
            mr_enclave: self.mr_enclave.clone().expect("mr_enclave is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `queue_remove_mr_enclave` CPI accounts.
pub struct QueueRemoveMrEnclaveCpiAccounts<'a, 'b> {
    pub queue: &'b solana_account_info::AccountInfo<'a>,

    pub authority: &'b solana_account_info::AccountInfo<'a>,

    pub program_authority: &'b solana_account_info::AccountInfo<'a>,

    pub state: &'b solana_account_info::AccountInfo<'a>,
}

/// `queue_remove_mr_enclave` CPI instruction.
pub struct QueueRemoveMrEnclaveCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,

    pub queue: &'b solana_account_info::AccountInfo<'a>,

    pub authority: &'b solana_account_info::AccountInfo<'a>,

    pub program_authority: &'b solana_account_info::AccountInfo<'a>,

    pub state: &'b solana_account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: QueueRemoveMrEnclaveInstructionArgs,
}

impl<'a, 'b> QueueRemoveMrEnclaveCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: QueueRemoveMrEnclaveCpiAccounts<'a, 'b>,
        args: QueueRemoveMrEnclaveInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            queue: accounts.queue,
            authority: accounts.authority,
            program_authority: accounts.program_authority,
            state: accounts.state,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(4 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(*self.queue.key, false));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.authority.key,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.program_authority.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.state.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&QueueRemoveMrEnclaveInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_instruction::Instruction {
            program_id: crate::SB_ON_DEMAND_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(5 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.queue.clone());
        account_infos.push(self.authority.clone());
        account_infos.push(self.program_authority.clone());
        account_infos.push(self.state.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `QueueRemoveMrEnclave` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` queue
///   1. `[signer]` authority
///   2. `[]` program_authority
///   3. `[]` state
#[derive(Clone, Debug)]
pub struct QueueRemoveMrEnclaveCpiBuilder<'a, 'b> {
    instruction: Box<QueueRemoveMrEnclaveCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> QueueRemoveMrEnclaveCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(QueueRemoveMrEnclaveCpiBuilderInstruction {
            __program: program,
            queue: None,
            authority: None,
            program_authority: None,
            state: None,
            mr_enclave: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn queue(&mut self, queue: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.queue = Some(queue);
        self
    }
    #[inline(always)]
    pub fn authority(&mut self, authority: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.authority = Some(authority);
        self
    }
    #[inline(always)]
    pub fn program_authority(
        &mut self,
        program_authority: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.program_authority = Some(program_authority);
        self
    }
    #[inline(always)]
    pub fn state(&mut self, state: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.state = Some(state);
        self
    }
    #[inline(always)]
    pub fn mr_enclave(&mut self, mr_enclave: [u8; 32]) -> &mut Self {
        self.instruction.mr_enclave = Some(mr_enclave);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        let args = QueueRemoveMrEnclaveInstructionArgs {
            mr_enclave: self
                .instruction
                .mr_enclave
                .clone()
                .expect("mr_enclave is not set"),
        };
        let instruction = QueueRemoveMrEnclaveCpi {
            __program: self.instruction.__program,

            queue: self.instruction.queue.expect("queue is not set"),

            authority: self.instruction.authority.expect("authority is not set"),

            program_authority: self
                .instruction
                .program_authority
                .expect("program_authority is not set"),

            state: self.instruction.state.expect("state is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct QueueRemoveMrEnclaveCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    queue: Option<&'b solana_account_info::AccountInfo<'a>>,
    authority: Option<&'b solana_account_info::AccountInfo<'a>>,
    program_authority: Option<&'b solana_account_info::AccountInfo<'a>>,
    state: Option<&'b solana_account_info::AccountInfo<'a>>,
    mr_enclave: Option<[u8; 32]>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
