//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
#[derive(Debug)]
pub struct PullFeedSubmitResponseConsensusLight {
    pub queue: solana_pubkey::Pubkey,

    pub program_state: solana_pubkey::Pubkey,

    pub recent_slothashes: solana_pubkey::Pubkey,

    pub ix_sysvar: solana_pubkey::Pubkey,
}

impl PullFeedSubmitResponseConsensusLight {
    pub fn instruction(
        &self,
        args: PullFeedSubmitResponseConsensusLightInstructionArgs,
    ) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: PullFeedSubmitResponseConsensusLightInstructionArgs,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(4 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.queue, false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.program_state,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.recent_slothashes,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.ix_sysvar,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data =
            borsh::to_vec(&PullFeedSubmitResponseConsensusLightInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_instruction::Instruction {
            program_id: crate::SB_ON_DEMAND_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct PullFeedSubmitResponseConsensusLightInstructionData {
    discriminator: [u8; 8],
}

impl PullFeedSubmitResponseConsensusLightInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [178, 179, 88, 144, 175, 130, 157, 87],
        }
    }
}

impl Default for PullFeedSubmitResponseConsensusLightInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct PullFeedSubmitResponseConsensusLightInstructionArgs {
    pub slot: u64,
    pub values: Vec<i128>,
}

/// Instruction builder for `PullFeedSubmitResponseConsensusLight`.
///
/// ### Accounts:
///
///   0. `[]` queue
///   1. `[]` program_state
///   2. `[optional]` recent_slothashes (default to `SysvarS1otHashes111111111111111111111111111`)
///   3. `[optional]` ix_sysvar (default to `Sysvar1nstructions1111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct PullFeedSubmitResponseConsensusLightBuilder {
    queue: Option<solana_pubkey::Pubkey>,
    program_state: Option<solana_pubkey::Pubkey>,
    recent_slothashes: Option<solana_pubkey::Pubkey>,
    ix_sysvar: Option<solana_pubkey::Pubkey>,
    slot: Option<u64>,
    values: Option<Vec<i128>>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl PullFeedSubmitResponseConsensusLightBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn queue(&mut self, queue: solana_pubkey::Pubkey) -> &mut Self {
        self.queue = Some(queue);
        self
    }
    #[inline(always)]
    pub fn program_state(&mut self, program_state: solana_pubkey::Pubkey) -> &mut Self {
        self.program_state = Some(program_state);
        self
    }
    /// `[optional account, default to 'SysvarS1otHashes111111111111111111111111111']`
    #[inline(always)]
    pub fn recent_slothashes(&mut self, recent_slothashes: solana_pubkey::Pubkey) -> &mut Self {
        self.recent_slothashes = Some(recent_slothashes);
        self
    }
    /// `[optional account, default to 'Sysvar1nstructions1111111111111111111111111']`
    #[inline(always)]
    pub fn ix_sysvar(&mut self, ix_sysvar: solana_pubkey::Pubkey) -> &mut Self {
        self.ix_sysvar = Some(ix_sysvar);
        self
    }
    #[inline(always)]
    pub fn slot(&mut self, slot: u64) -> &mut Self {
        self.slot = Some(slot);
        self
    }
    #[inline(always)]
    pub fn values(&mut self, values: Vec<i128>) -> &mut Self {
        self.values = Some(values);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = PullFeedSubmitResponseConsensusLight {
            queue: self.queue.expect("queue is not set"),
            program_state: self.program_state.expect("program_state is not set"),
            recent_slothashes: self.recent_slothashes.unwrap_or(solana_pubkey::pubkey!(
                "SysvarS1otHashes111111111111111111111111111"
            )),
            ix_sysvar: self.ix_sysvar.unwrap_or(solana_pubkey::pubkey!(
                "Sysvar1nstructions1111111111111111111111111"
            )),
        };
        let args = PullFeedSubmitResponseConsensusLightInstructionArgs {
            slot: self.slot.clone().expect("slot is not set"),
            values: self.values.clone().expect("values is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `pull_feed_submit_response_consensus_light` CPI accounts.
pub struct PullFeedSubmitResponseConsensusLightCpiAccounts<'a, 'b> {
    pub queue: &'b solana_account_info::AccountInfo<'a>,

    pub program_state: &'b solana_account_info::AccountInfo<'a>,

    pub recent_slothashes: &'b solana_account_info::AccountInfo<'a>,

    pub ix_sysvar: &'b solana_account_info::AccountInfo<'a>,
}

/// `pull_feed_submit_response_consensus_light` CPI instruction.
pub struct PullFeedSubmitResponseConsensusLightCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,

    pub queue: &'b solana_account_info::AccountInfo<'a>,

    pub program_state: &'b solana_account_info::AccountInfo<'a>,

    pub recent_slothashes: &'b solana_account_info::AccountInfo<'a>,

    pub ix_sysvar: &'b solana_account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: PullFeedSubmitResponseConsensusLightInstructionArgs,
}

impl<'a, 'b> PullFeedSubmitResponseConsensusLightCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: PullFeedSubmitResponseConsensusLightCpiAccounts<'a, 'b>,
        args: PullFeedSubmitResponseConsensusLightInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            queue: accounts.queue,
            program_state: accounts.program_state,
            recent_slothashes: accounts.recent_slothashes,
            ix_sysvar: accounts.ix_sysvar,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(4 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.queue.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.program_state.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.recent_slothashes.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.ix_sysvar.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data =
            borsh::to_vec(&PullFeedSubmitResponseConsensusLightInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_instruction::Instruction {
            program_id: crate::SB_ON_DEMAND_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(5 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.queue.clone());
        account_infos.push(self.program_state.clone());
        account_infos.push(self.recent_slothashes.clone());
        account_infos.push(self.ix_sysvar.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `PullFeedSubmitResponseConsensusLight` via CPI.
///
/// ### Accounts:
///
///   0. `[]` queue
///   1. `[]` program_state
///   2. `[]` recent_slothashes
///   3. `[]` ix_sysvar
#[derive(Clone, Debug)]
pub struct PullFeedSubmitResponseConsensusLightCpiBuilder<'a, 'b> {
    instruction: Box<PullFeedSubmitResponseConsensusLightCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> PullFeedSubmitResponseConsensusLightCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(PullFeedSubmitResponseConsensusLightCpiBuilderInstruction {
            __program: program,
            queue: None,
            program_state: None,
            recent_slothashes: None,
            ix_sysvar: None,
            slot: None,
            values: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn queue(&mut self, queue: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.queue = Some(queue);
        self
    }
    #[inline(always)]
    pub fn program_state(
        &mut self,
        program_state: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.program_state = Some(program_state);
        self
    }
    #[inline(always)]
    pub fn recent_slothashes(
        &mut self,
        recent_slothashes: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.recent_slothashes = Some(recent_slothashes);
        self
    }
    #[inline(always)]
    pub fn ix_sysvar(&mut self, ix_sysvar: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.ix_sysvar = Some(ix_sysvar);
        self
    }
    #[inline(always)]
    pub fn slot(&mut self, slot: u64) -> &mut Self {
        self.instruction.slot = Some(slot);
        self
    }
    #[inline(always)]
    pub fn values(&mut self, values: Vec<i128>) -> &mut Self {
        self.instruction.values = Some(values);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        let args = PullFeedSubmitResponseConsensusLightInstructionArgs {
            slot: self.instruction.slot.clone().expect("slot is not set"),
            values: self.instruction.values.clone().expect("values is not set"),
        };
        let instruction = PullFeedSubmitResponseConsensusLightCpi {
            __program: self.instruction.__program,

            queue: self.instruction.queue.expect("queue is not set"),

            program_state: self
                .instruction
                .program_state
                .expect("program_state is not set"),

            recent_slothashes: self
                .instruction
                .recent_slothashes
                .expect("recent_slothashes is not set"),

            ix_sysvar: self.instruction.ix_sysvar.expect("ix_sysvar is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct PullFeedSubmitResponseConsensusLightCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    queue: Option<&'b solana_account_info::AccountInfo<'a>>,
    program_state: Option<&'b solana_account_info::AccountInfo<'a>>,
    recent_slothashes: Option<&'b solana_account_info::AccountInfo<'a>>,
    ix_sysvar: Option<&'b solana_account_info::AccountInfo<'a>>,
    slot: Option<u64>,
    values: Option<Vec<i128>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
