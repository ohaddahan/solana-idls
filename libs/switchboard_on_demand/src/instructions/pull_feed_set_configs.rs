//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;
use solana_pubkey::Pubkey;

/// Accounts.
#[derive(Debug)]
pub struct PullFeedSetConfigs {
    pub pull_feed: solana_pubkey::Pubkey,

    pub authority: solana_pubkey::Pubkey,
}

impl PullFeedSetConfigs {
    pub fn instruction(
        &self,
        args: PullFeedSetConfigsInstructionArgs,
    ) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: PullFeedSetConfigsInstructionArgs,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(2 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(self.pull_feed, false));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.authority,
            true,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&PullFeedSetConfigsInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_instruction::Instruction {
            program_id: crate::SB_ON_DEMAND_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct PullFeedSetConfigsInstructionData {
    discriminator: [u8; 8],
}

impl PullFeedSetConfigsInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [217, 45, 11, 246, 64, 26, 82, 168],
        }
    }
}

impl Default for PullFeedSetConfigsInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct PullFeedSetConfigsInstructionArgs {
    pub feed_hash: Option<[u8; 32]>,
    pub authority_arg: Option<Pubkey>,
    pub max_variance: Option<u64>,
    pub min_responses: Option<u32>,
    pub name: Option<[u8; 32]>,
    pub ipfs_hash: Option<[u8; 32]>,
    pub min_sample_size: Option<u8>,
    pub max_staleness: Option<u32>,
    pub permit_write_by_authority: Option<bool>,
}

/// Instruction builder for `PullFeedSetConfigs`.
///
/// ### Accounts:
///
///   0. `[writable]` pull_feed
///   1. `[signer]` authority
#[derive(Clone, Debug, Default)]
pub struct PullFeedSetConfigsBuilder {
    pull_feed: Option<solana_pubkey::Pubkey>,
    authority: Option<solana_pubkey::Pubkey>,
    feed_hash: Option<[u8; 32]>,
    authority_arg: Option<Pubkey>,
    max_variance: Option<u64>,
    min_responses: Option<u32>,
    name: Option<[u8; 32]>,
    ipfs_hash: Option<[u8; 32]>,
    min_sample_size: Option<u8>,
    max_staleness: Option<u32>,
    permit_write_by_authority: Option<bool>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl PullFeedSetConfigsBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn pull_feed(&mut self, pull_feed: solana_pubkey::Pubkey) -> &mut Self {
        self.pull_feed = Some(pull_feed);
        self
    }
    #[inline(always)]
    pub fn authority(&mut self, authority: solana_pubkey::Pubkey) -> &mut Self {
        self.authority = Some(authority);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn feed_hash(&mut self, feed_hash: [u8; 32]) -> &mut Self {
        self.feed_hash = Some(feed_hash);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn authority_arg(&mut self, authority_arg: Pubkey) -> &mut Self {
        self.authority_arg = Some(authority_arg);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn max_variance(&mut self, max_variance: u64) -> &mut Self {
        self.max_variance = Some(max_variance);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn min_responses(&mut self, min_responses: u32) -> &mut Self {
        self.min_responses = Some(min_responses);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn name(&mut self, name: [u8; 32]) -> &mut Self {
        self.name = Some(name);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn ipfs_hash(&mut self, ipfs_hash: [u8; 32]) -> &mut Self {
        self.ipfs_hash = Some(ipfs_hash);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn min_sample_size(&mut self, min_sample_size: u8) -> &mut Self {
        self.min_sample_size = Some(min_sample_size);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn max_staleness(&mut self, max_staleness: u32) -> &mut Self {
        self.max_staleness = Some(max_staleness);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn permit_write_by_authority(&mut self, permit_write_by_authority: bool) -> &mut Self {
        self.permit_write_by_authority = Some(permit_write_by_authority);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = PullFeedSetConfigs {
            pull_feed: self.pull_feed.expect("pull_feed is not set"),
            authority: self.authority.expect("authority is not set"),
        };
        let args = PullFeedSetConfigsInstructionArgs {
            feed_hash: self.feed_hash.clone(),
            authority_arg: self.authority_arg.clone(),
            max_variance: self.max_variance.clone(),
            min_responses: self.min_responses.clone(),
            name: self.name.clone(),
            ipfs_hash: self.ipfs_hash.clone(),
            min_sample_size: self.min_sample_size.clone(),
            max_staleness: self.max_staleness.clone(),
            permit_write_by_authority: self.permit_write_by_authority.clone(),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `pull_feed_set_configs` CPI accounts.
pub struct PullFeedSetConfigsCpiAccounts<'a, 'b> {
    pub pull_feed: &'b solana_account_info::AccountInfo<'a>,

    pub authority: &'b solana_account_info::AccountInfo<'a>,
}

/// `pull_feed_set_configs` CPI instruction.
pub struct PullFeedSetConfigsCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,

    pub pull_feed: &'b solana_account_info::AccountInfo<'a>,

    pub authority: &'b solana_account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: PullFeedSetConfigsInstructionArgs,
}

impl<'a, 'b> PullFeedSetConfigsCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: PullFeedSetConfigsCpiAccounts<'a, 'b>,
        args: PullFeedSetConfigsInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            pull_feed: accounts.pull_feed,
            authority: accounts.authority,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(2 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(
            *self.pull_feed.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.authority.key,
            true,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&PullFeedSetConfigsInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_instruction::Instruction {
            program_id: crate::SB_ON_DEMAND_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(3 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.pull_feed.clone());
        account_infos.push(self.authority.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `PullFeedSetConfigs` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` pull_feed
///   1. `[signer]` authority
#[derive(Clone, Debug)]
pub struct PullFeedSetConfigsCpiBuilder<'a, 'b> {
    instruction: Box<PullFeedSetConfigsCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> PullFeedSetConfigsCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(PullFeedSetConfigsCpiBuilderInstruction {
            __program: program,
            pull_feed: None,
            authority: None,
            feed_hash: None,
            authority_arg: None,
            max_variance: None,
            min_responses: None,
            name: None,
            ipfs_hash: None,
            min_sample_size: None,
            max_staleness: None,
            permit_write_by_authority: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn pull_feed(&mut self, pull_feed: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.pull_feed = Some(pull_feed);
        self
    }
    #[inline(always)]
    pub fn authority(&mut self, authority: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.authority = Some(authority);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn feed_hash(&mut self, feed_hash: [u8; 32]) -> &mut Self {
        self.instruction.feed_hash = Some(feed_hash);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn authority_arg(&mut self, authority_arg: Pubkey) -> &mut Self {
        self.instruction.authority_arg = Some(authority_arg);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn max_variance(&mut self, max_variance: u64) -> &mut Self {
        self.instruction.max_variance = Some(max_variance);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn min_responses(&mut self, min_responses: u32) -> &mut Self {
        self.instruction.min_responses = Some(min_responses);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn name(&mut self, name: [u8; 32]) -> &mut Self {
        self.instruction.name = Some(name);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn ipfs_hash(&mut self, ipfs_hash: [u8; 32]) -> &mut Self {
        self.instruction.ipfs_hash = Some(ipfs_hash);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn min_sample_size(&mut self, min_sample_size: u8) -> &mut Self {
        self.instruction.min_sample_size = Some(min_sample_size);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn max_staleness(&mut self, max_staleness: u32) -> &mut Self {
        self.instruction.max_staleness = Some(max_staleness);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn permit_write_by_authority(&mut self, permit_write_by_authority: bool) -> &mut Self {
        self.instruction.permit_write_by_authority = Some(permit_write_by_authority);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        let args = PullFeedSetConfigsInstructionArgs {
            feed_hash: self.instruction.feed_hash.clone(),
            authority_arg: self.instruction.authority_arg.clone(),
            max_variance: self.instruction.max_variance.clone(),
            min_responses: self.instruction.min_responses.clone(),
            name: self.instruction.name.clone(),
            ipfs_hash: self.instruction.ipfs_hash.clone(),
            min_sample_size: self.instruction.min_sample_size.clone(),
            max_staleness: self.instruction.max_staleness.clone(),
            permit_write_by_authority: self.instruction.permit_write_by_authority.clone(),
        };
        let instruction = PullFeedSetConfigsCpi {
            __program: self.instruction.__program,

            pull_feed: self.instruction.pull_feed.expect("pull_feed is not set"),

            authority: self.instruction.authority.expect("authority is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct PullFeedSetConfigsCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    pull_feed: Option<&'b solana_account_info::AccountInfo<'a>>,
    authority: Option<&'b solana_account_info::AccountInfo<'a>>,
    feed_hash: Option<[u8; 32]>,
    authority_arg: Option<Pubkey>,
    max_variance: Option<u64>,
    min_responses: Option<u32>,
    name: Option<[u8; 32]>,
    ipfs_hash: Option<[u8; 32]>,
    min_sample_size: Option<u8>,
    max_staleness: Option<u32>,
    permit_write_by_authority: Option<bool>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
