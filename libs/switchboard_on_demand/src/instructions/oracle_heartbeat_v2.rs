//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
#[derive(Debug)]
pub struct OracleHeartbeatV2 {
    pub oracle: solana_pubkey::Pubkey,

    pub oracle_stats: solana_pubkey::Pubkey,

    pub oracle_signer: solana_pubkey::Pubkey,

    pub queue: solana_pubkey::Pubkey,

    pub gc_node: solana_pubkey::Pubkey,

    pub program_state: solana_pubkey::Pubkey,
}

impl OracleHeartbeatV2 {
    pub fn instruction(
        &self,
        args: OracleHeartbeatV2InstructionArgs,
    ) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: OracleHeartbeatV2InstructionArgs,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(6 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(self.oracle, false));
        accounts.push(solana_instruction::AccountMeta::new(
            self.oracle_stats,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.oracle_signer,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.queue, false));
        accounts.push(solana_instruction::AccountMeta::new(self.gc_node, false));
        accounts.push(solana_instruction::AccountMeta::new(
            self.program_state,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&OracleHeartbeatV2InstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_instruction::Instruction {
            program_id: crate::SB_ON_DEMAND_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct OracleHeartbeatV2InstructionData {
    discriminator: [u8; 8],
}

impl OracleHeartbeatV2InstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [122, 231, 66, 32, 226, 62, 144, 103],
        }
    }
}

impl Default for OracleHeartbeatV2InstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct OracleHeartbeatV2InstructionArgs {
    pub gateway_uri: Option<[u8; 64]>,
}

/// Instruction builder for `OracleHeartbeatV2`.
///
/// ### Accounts:
///
///   0. `[writable]` oracle
///   1. `[writable]` oracle_stats
///   2. `[signer]` oracle_signer
///   3. `[writable]` queue
///   4. `[writable]` gc_node
///   5. `[writable]` program_state
#[derive(Clone, Debug, Default)]
pub struct OracleHeartbeatV2Builder {
    oracle: Option<solana_pubkey::Pubkey>,
    oracle_stats: Option<solana_pubkey::Pubkey>,
    oracle_signer: Option<solana_pubkey::Pubkey>,
    queue: Option<solana_pubkey::Pubkey>,
    gc_node: Option<solana_pubkey::Pubkey>,
    program_state: Option<solana_pubkey::Pubkey>,
    gateway_uri: Option<[u8; 64]>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl OracleHeartbeatV2Builder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn oracle(&mut self, oracle: solana_pubkey::Pubkey) -> &mut Self {
        self.oracle = Some(oracle);
        self
    }
    #[inline(always)]
    pub fn oracle_stats(&mut self, oracle_stats: solana_pubkey::Pubkey) -> &mut Self {
        self.oracle_stats = Some(oracle_stats);
        self
    }
    #[inline(always)]
    pub fn oracle_signer(&mut self, oracle_signer: solana_pubkey::Pubkey) -> &mut Self {
        self.oracle_signer = Some(oracle_signer);
        self
    }
    #[inline(always)]
    pub fn queue(&mut self, queue: solana_pubkey::Pubkey) -> &mut Self {
        self.queue = Some(queue);
        self
    }
    #[inline(always)]
    pub fn gc_node(&mut self, gc_node: solana_pubkey::Pubkey) -> &mut Self {
        self.gc_node = Some(gc_node);
        self
    }
    #[inline(always)]
    pub fn program_state(&mut self, program_state: solana_pubkey::Pubkey) -> &mut Self {
        self.program_state = Some(program_state);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn gateway_uri(&mut self, gateway_uri: [u8; 64]) -> &mut Self {
        self.gateway_uri = Some(gateway_uri);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = OracleHeartbeatV2 {
            oracle: self.oracle.expect("oracle is not set"),
            oracle_stats: self.oracle_stats.expect("oracle_stats is not set"),
            oracle_signer: self.oracle_signer.expect("oracle_signer is not set"),
            queue: self.queue.expect("queue is not set"),
            gc_node: self.gc_node.expect("gc_node is not set"),
            program_state: self.program_state.expect("program_state is not set"),
        };
        let args = OracleHeartbeatV2InstructionArgs {
            gateway_uri: self.gateway_uri.clone(),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `oracle_heartbeat_v2` CPI accounts.
pub struct OracleHeartbeatV2CpiAccounts<'a, 'b> {
    pub oracle: &'b solana_account_info::AccountInfo<'a>,

    pub oracle_stats: &'b solana_account_info::AccountInfo<'a>,

    pub oracle_signer: &'b solana_account_info::AccountInfo<'a>,

    pub queue: &'b solana_account_info::AccountInfo<'a>,

    pub gc_node: &'b solana_account_info::AccountInfo<'a>,

    pub program_state: &'b solana_account_info::AccountInfo<'a>,
}

/// `oracle_heartbeat_v2` CPI instruction.
pub struct OracleHeartbeatV2Cpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,

    pub oracle: &'b solana_account_info::AccountInfo<'a>,

    pub oracle_stats: &'b solana_account_info::AccountInfo<'a>,

    pub oracle_signer: &'b solana_account_info::AccountInfo<'a>,

    pub queue: &'b solana_account_info::AccountInfo<'a>,

    pub gc_node: &'b solana_account_info::AccountInfo<'a>,

    pub program_state: &'b solana_account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: OracleHeartbeatV2InstructionArgs,
}

impl<'a, 'b> OracleHeartbeatV2Cpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: OracleHeartbeatV2CpiAccounts<'a, 'b>,
        args: OracleHeartbeatV2InstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            oracle: accounts.oracle,
            oracle_stats: accounts.oracle_stats,
            oracle_signer: accounts.oracle_signer,
            queue: accounts.queue,
            gc_node: accounts.gc_node,
            program_state: accounts.program_state,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(6 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(
            *self.oracle.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.oracle_stats.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.oracle_signer.key,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new(*self.queue.key, false));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.gc_node.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.program_state.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&OracleHeartbeatV2InstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_instruction::Instruction {
            program_id: crate::SB_ON_DEMAND_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(7 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.oracle.clone());
        account_infos.push(self.oracle_stats.clone());
        account_infos.push(self.oracle_signer.clone());
        account_infos.push(self.queue.clone());
        account_infos.push(self.gc_node.clone());
        account_infos.push(self.program_state.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `OracleHeartbeatV2` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` oracle
///   1. `[writable]` oracle_stats
///   2. `[signer]` oracle_signer
///   3. `[writable]` queue
///   4. `[writable]` gc_node
///   5. `[writable]` program_state
#[derive(Clone, Debug)]
pub struct OracleHeartbeatV2CpiBuilder<'a, 'b> {
    instruction: Box<OracleHeartbeatV2CpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> OracleHeartbeatV2CpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(OracleHeartbeatV2CpiBuilderInstruction {
            __program: program,
            oracle: None,
            oracle_stats: None,
            oracle_signer: None,
            queue: None,
            gc_node: None,
            program_state: None,
            gateway_uri: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn oracle(&mut self, oracle: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.oracle = Some(oracle);
        self
    }
    #[inline(always)]
    pub fn oracle_stats(
        &mut self,
        oracle_stats: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.oracle_stats = Some(oracle_stats);
        self
    }
    #[inline(always)]
    pub fn oracle_signer(
        &mut self,
        oracle_signer: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.oracle_signer = Some(oracle_signer);
        self
    }
    #[inline(always)]
    pub fn queue(&mut self, queue: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.queue = Some(queue);
        self
    }
    #[inline(always)]
    pub fn gc_node(&mut self, gc_node: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.gc_node = Some(gc_node);
        self
    }
    #[inline(always)]
    pub fn program_state(
        &mut self,
        program_state: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.program_state = Some(program_state);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn gateway_uri(&mut self, gateway_uri: [u8; 64]) -> &mut Self {
        self.instruction.gateway_uri = Some(gateway_uri);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        let args = OracleHeartbeatV2InstructionArgs {
            gateway_uri: self.instruction.gateway_uri.clone(),
        };
        let instruction = OracleHeartbeatV2Cpi {
            __program: self.instruction.__program,

            oracle: self.instruction.oracle.expect("oracle is not set"),

            oracle_stats: self
                .instruction
                .oracle_stats
                .expect("oracle_stats is not set"),

            oracle_signer: self
                .instruction
                .oracle_signer
                .expect("oracle_signer is not set"),

            queue: self.instruction.queue.expect("queue is not set"),

            gc_node: self.instruction.gc_node.expect("gc_node is not set"),

            program_state: self
                .instruction
                .program_state
                .expect("program_state is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct OracleHeartbeatV2CpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    oracle: Option<&'b solana_account_info::AccountInfo<'a>>,
    oracle_stats: Option<&'b solana_account_info::AccountInfo<'a>>,
    oracle_signer: Option<&'b solana_account_info::AccountInfo<'a>>,
    queue: Option<&'b solana_account_info::AccountInfo<'a>>,
    gc_node: Option<&'b solana_account_info::AccountInfo<'a>>,
    program_state: Option<&'b solana_account_info::AccountInfo<'a>>,
    gateway_uri: Option<[u8; 64]>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
