//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
#[derive(Debug)]
pub struct QueueSetNcn {
    pub queue: solana_pubkey::Pubkey,

    pub authority: solana_pubkey::Pubkey,

    pub state: solana_pubkey::Pubkey,

    pub ncn: solana_pubkey::Pubkey,
}

impl QueueSetNcn {
    pub fn instruction(&self) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(4 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(self.queue, false));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.authority,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.state, false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.ncn, false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = borsh::to_vec(&QueueSetNcnInstructionData::new()).unwrap();

        solana_instruction::Instruction {
            program_id: crate::SB_ON_DEMAND_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct QueueSetNcnInstructionData {
    discriminator: [u8; 8],
}

impl QueueSetNcnInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [232, 223, 179, 12, 20, 136, 181, 219],
        }
    }
}

impl Default for QueueSetNcnInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

/// Instruction builder for `QueueSetNcn`.
///
/// ### Accounts:
///
///   0. `[writable]` queue
///   1. `[signer]` authority
///   2. `[]` state
///   3. `[]` ncn
#[derive(Clone, Debug, Default)]
pub struct QueueSetNcnBuilder {
    queue: Option<solana_pubkey::Pubkey>,
    authority: Option<solana_pubkey::Pubkey>,
    state: Option<solana_pubkey::Pubkey>,
    ncn: Option<solana_pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl QueueSetNcnBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn queue(&mut self, queue: solana_pubkey::Pubkey) -> &mut Self {
        self.queue = Some(queue);
        self
    }
    #[inline(always)]
    pub fn authority(&mut self, authority: solana_pubkey::Pubkey) -> &mut Self {
        self.authority = Some(authority);
        self
    }
    #[inline(always)]
    pub fn state(&mut self, state: solana_pubkey::Pubkey) -> &mut Self {
        self.state = Some(state);
        self
    }
    #[inline(always)]
    pub fn ncn(&mut self, ncn: solana_pubkey::Pubkey) -> &mut Self {
        self.ncn = Some(ncn);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = QueueSetNcn {
            queue: self.queue.expect("queue is not set"),
            authority: self.authority.expect("authority is not set"),
            state: self.state.expect("state is not set"),
            ncn: self.ncn.expect("ncn is not set"),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `queue_set_ncn` CPI accounts.
pub struct QueueSetNcnCpiAccounts<'a, 'b> {
    pub queue: &'b solana_account_info::AccountInfo<'a>,

    pub authority: &'b solana_account_info::AccountInfo<'a>,

    pub state: &'b solana_account_info::AccountInfo<'a>,

    pub ncn: &'b solana_account_info::AccountInfo<'a>,
}

/// `queue_set_ncn` CPI instruction.
pub struct QueueSetNcnCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,

    pub queue: &'b solana_account_info::AccountInfo<'a>,

    pub authority: &'b solana_account_info::AccountInfo<'a>,

    pub state: &'b solana_account_info::AccountInfo<'a>,

    pub ncn: &'b solana_account_info::AccountInfo<'a>,
}

impl<'a, 'b> QueueSetNcnCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: QueueSetNcnCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            queue: accounts.queue,
            authority: accounts.authority,
            state: accounts.state,
            ncn: accounts.ncn,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(4 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(*self.queue.key, false));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.authority.key,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.state.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.ncn.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = borsh::to_vec(&QueueSetNcnInstructionData::new()).unwrap();

        let instruction = solana_instruction::Instruction {
            program_id: crate::SB_ON_DEMAND_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(5 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.queue.clone());
        account_infos.push(self.authority.clone());
        account_infos.push(self.state.clone());
        account_infos.push(self.ncn.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `QueueSetNcn` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` queue
///   1. `[signer]` authority
///   2. `[]` state
///   3. `[]` ncn
#[derive(Clone, Debug)]
pub struct QueueSetNcnCpiBuilder<'a, 'b> {
    instruction: Box<QueueSetNcnCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> QueueSetNcnCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(QueueSetNcnCpiBuilderInstruction {
            __program: program,
            queue: None,
            authority: None,
            state: None,
            ncn: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn queue(&mut self, queue: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.queue = Some(queue);
        self
    }
    #[inline(always)]
    pub fn authority(&mut self, authority: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.authority = Some(authority);
        self
    }
    #[inline(always)]
    pub fn state(&mut self, state: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.state = Some(state);
        self
    }
    #[inline(always)]
    pub fn ncn(&mut self, ncn: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.ncn = Some(ncn);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        let instruction = QueueSetNcnCpi {
            __program: self.instruction.__program,

            queue: self.instruction.queue.expect("queue is not set"),

            authority: self.instruction.authority.expect("authority is not set"),

            state: self.instruction.state.expect("state is not set"),

            ncn: self.instruction.ncn.expect("ncn is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct QueueSetNcnCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    queue: Option<&'b solana_account_info::AccountInfo<'a>>,
    authority: Option<&'b solana_account_info::AccountInfo<'a>>,
    state: Option<&'b solana_account_info::AccountInfo<'a>>,
    ncn: Option<&'b solana_account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
