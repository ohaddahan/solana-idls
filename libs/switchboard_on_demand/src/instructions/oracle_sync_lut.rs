//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
#[derive(Debug)]
pub struct OracleSyncLut {
    pub oracle: solana_pubkey::Pubkey,

    pub queue: solana_pubkey::Pubkey,

    pub ncn: solana_pubkey::Pubkey,

    pub vault: solana_pubkey::Pubkey,

    pub state: solana_pubkey::Pubkey,

    pub authority: solana_pubkey::Pubkey,

    pub operator: solana_pubkey::Pubkey,

    pub ncn_operator_state: solana_pubkey::Pubkey,

    pub operator_vault_ticket: solana_pubkey::Pubkey,

    pub vault_operator_delegation: solana_pubkey::Pubkey,

    pub lut_signer: solana_pubkey::Pubkey,

    pub lut: solana_pubkey::Pubkey,

    pub address_lookup_table_program: solana_pubkey::Pubkey,

    pub payer: solana_pubkey::Pubkey,

    pub system_program: solana_pubkey::Pubkey,
}

impl OracleSyncLut {
    pub fn instruction(&self) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(15 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.oracle,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.queue, false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.ncn, false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.vault, false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.state, false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.authority,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.operator,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.ncn_operator_state,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.operator_vault_ticket,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.vault_operator_delegation,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.lut_signer,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.lut, false));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.address_lookup_table_program,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.payer, true,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = borsh::to_vec(&OracleSyncLutInstructionData::new()).unwrap();

        solana_instruction::Instruction {
            program_id: crate::SB_ON_DEMAND_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct OracleSyncLutInstructionData {
    discriminator: [u8; 8],
}

impl OracleSyncLutInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [138, 99, 12, 59, 18, 170, 171, 45],
        }
    }
}

impl Default for OracleSyncLutInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

/// Instruction builder for `OracleSyncLut`.
///
/// ### Accounts:
///
///   0. `[]` oracle
///   1. `[]` queue
///   2. `[]` ncn
///   3. `[]` vault
///   4. `[]` state
///   5. `[signer]` authority
///   6. `[]` operator
///   7. `[]` ncn_operator_state
///   8. `[]` operator_vault_ticket
///   9. `[]` vault_operator_delegation
///   10. `[]` lut_signer
///   11. `[writable]` lut
///   12. `[optional]` address_lookup_table_program (default to `AddressLookupTab1e1111111111111111111111111`)
///   13. `[signer]` payer
///   14. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct OracleSyncLutBuilder {
    oracle: Option<solana_pubkey::Pubkey>,
    queue: Option<solana_pubkey::Pubkey>,
    ncn: Option<solana_pubkey::Pubkey>,
    vault: Option<solana_pubkey::Pubkey>,
    state: Option<solana_pubkey::Pubkey>,
    authority: Option<solana_pubkey::Pubkey>,
    operator: Option<solana_pubkey::Pubkey>,
    ncn_operator_state: Option<solana_pubkey::Pubkey>,
    operator_vault_ticket: Option<solana_pubkey::Pubkey>,
    vault_operator_delegation: Option<solana_pubkey::Pubkey>,
    lut_signer: Option<solana_pubkey::Pubkey>,
    lut: Option<solana_pubkey::Pubkey>,
    address_lookup_table_program: Option<solana_pubkey::Pubkey>,
    payer: Option<solana_pubkey::Pubkey>,
    system_program: Option<solana_pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl OracleSyncLutBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn oracle(&mut self, oracle: solana_pubkey::Pubkey) -> &mut Self {
        self.oracle = Some(oracle);
        self
    }
    #[inline(always)]
    pub fn queue(&mut self, queue: solana_pubkey::Pubkey) -> &mut Self {
        self.queue = Some(queue);
        self
    }
    #[inline(always)]
    pub fn ncn(&mut self, ncn: solana_pubkey::Pubkey) -> &mut Self {
        self.ncn = Some(ncn);
        self
    }
    #[inline(always)]
    pub fn vault(&mut self, vault: solana_pubkey::Pubkey) -> &mut Self {
        self.vault = Some(vault);
        self
    }
    #[inline(always)]
    pub fn state(&mut self, state: solana_pubkey::Pubkey) -> &mut Self {
        self.state = Some(state);
        self
    }
    #[inline(always)]
    pub fn authority(&mut self, authority: solana_pubkey::Pubkey) -> &mut Self {
        self.authority = Some(authority);
        self
    }
    #[inline(always)]
    pub fn operator(&mut self, operator: solana_pubkey::Pubkey) -> &mut Self {
        self.operator = Some(operator);
        self
    }
    #[inline(always)]
    pub fn ncn_operator_state(&mut self, ncn_operator_state: solana_pubkey::Pubkey) -> &mut Self {
        self.ncn_operator_state = Some(ncn_operator_state);
        self
    }
    #[inline(always)]
    pub fn operator_vault_ticket(
        &mut self,
        operator_vault_ticket: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.operator_vault_ticket = Some(operator_vault_ticket);
        self
    }
    #[inline(always)]
    pub fn vault_operator_delegation(
        &mut self,
        vault_operator_delegation: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.vault_operator_delegation = Some(vault_operator_delegation);
        self
    }
    #[inline(always)]
    pub fn lut_signer(&mut self, lut_signer: solana_pubkey::Pubkey) -> &mut Self {
        self.lut_signer = Some(lut_signer);
        self
    }
    #[inline(always)]
    pub fn lut(&mut self, lut: solana_pubkey::Pubkey) -> &mut Self {
        self.lut = Some(lut);
        self
    }
    /// `[optional account, default to 'AddressLookupTab1e1111111111111111111111111']`
    #[inline(always)]
    pub fn address_lookup_table_program(
        &mut self,
        address_lookup_table_program: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.address_lookup_table_program = Some(address_lookup_table_program);
        self
    }
    #[inline(always)]
    pub fn payer(&mut self, payer: solana_pubkey::Pubkey) -> &mut Self {
        self.payer = Some(payer);
        self
    }
    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = OracleSyncLut {
            oracle: self.oracle.expect("oracle is not set"),
            queue: self.queue.expect("queue is not set"),
            ncn: self.ncn.expect("ncn is not set"),
            vault: self.vault.expect("vault is not set"),
            state: self.state.expect("state is not set"),
            authority: self.authority.expect("authority is not set"),
            operator: self.operator.expect("operator is not set"),
            ncn_operator_state: self
                .ncn_operator_state
                .expect("ncn_operator_state is not set"),
            operator_vault_ticket: self
                .operator_vault_ticket
                .expect("operator_vault_ticket is not set"),
            vault_operator_delegation: self
                .vault_operator_delegation
                .expect("vault_operator_delegation is not set"),
            lut_signer: self.lut_signer.expect("lut_signer is not set"),
            lut: self.lut.expect("lut is not set"),
            address_lookup_table_program: self.address_lookup_table_program.unwrap_or(
                solana_pubkey::pubkey!("AddressLookupTab1e1111111111111111111111111"),
            ),
            payer: self.payer.expect("payer is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_pubkey::pubkey!("11111111111111111111111111111111")),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `oracle_sync_lut` CPI accounts.
pub struct OracleSyncLutCpiAccounts<'a, 'b> {
    pub oracle: &'b solana_account_info::AccountInfo<'a>,

    pub queue: &'b solana_account_info::AccountInfo<'a>,

    pub ncn: &'b solana_account_info::AccountInfo<'a>,

    pub vault: &'b solana_account_info::AccountInfo<'a>,

    pub state: &'b solana_account_info::AccountInfo<'a>,

    pub authority: &'b solana_account_info::AccountInfo<'a>,

    pub operator: &'b solana_account_info::AccountInfo<'a>,

    pub ncn_operator_state: &'b solana_account_info::AccountInfo<'a>,

    pub operator_vault_ticket: &'b solana_account_info::AccountInfo<'a>,

    pub vault_operator_delegation: &'b solana_account_info::AccountInfo<'a>,

    pub lut_signer: &'b solana_account_info::AccountInfo<'a>,

    pub lut: &'b solana_account_info::AccountInfo<'a>,

    pub address_lookup_table_program: &'b solana_account_info::AccountInfo<'a>,

    pub payer: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,
}

/// `oracle_sync_lut` CPI instruction.
pub struct OracleSyncLutCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,

    pub oracle: &'b solana_account_info::AccountInfo<'a>,

    pub queue: &'b solana_account_info::AccountInfo<'a>,

    pub ncn: &'b solana_account_info::AccountInfo<'a>,

    pub vault: &'b solana_account_info::AccountInfo<'a>,

    pub state: &'b solana_account_info::AccountInfo<'a>,

    pub authority: &'b solana_account_info::AccountInfo<'a>,

    pub operator: &'b solana_account_info::AccountInfo<'a>,

    pub ncn_operator_state: &'b solana_account_info::AccountInfo<'a>,

    pub operator_vault_ticket: &'b solana_account_info::AccountInfo<'a>,

    pub vault_operator_delegation: &'b solana_account_info::AccountInfo<'a>,

    pub lut_signer: &'b solana_account_info::AccountInfo<'a>,

    pub lut: &'b solana_account_info::AccountInfo<'a>,

    pub address_lookup_table_program: &'b solana_account_info::AccountInfo<'a>,

    pub payer: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,
}

impl<'a, 'b> OracleSyncLutCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: OracleSyncLutCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            oracle: accounts.oracle,
            queue: accounts.queue,
            ncn: accounts.ncn,
            vault: accounts.vault,
            state: accounts.state,
            authority: accounts.authority,
            operator: accounts.operator,
            ncn_operator_state: accounts.ncn_operator_state,
            operator_vault_ticket: accounts.operator_vault_ticket,
            vault_operator_delegation: accounts.vault_operator_delegation,
            lut_signer: accounts.lut_signer,
            lut: accounts.lut,
            address_lookup_table_program: accounts.address_lookup_table_program,
            payer: accounts.payer,
            system_program: accounts.system_program,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(15 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.oracle.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.queue.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.ncn.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.vault.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.state.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.authority.key,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.operator.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.ncn_operator_state.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.operator_vault_ticket.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.vault_operator_delegation.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.lut_signer.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(*self.lut.key, false));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.address_lookup_table_program.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.payer.key,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = borsh::to_vec(&OracleSyncLutInstructionData::new()).unwrap();

        let instruction = solana_instruction::Instruction {
            program_id: crate::SB_ON_DEMAND_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(16 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.oracle.clone());
        account_infos.push(self.queue.clone());
        account_infos.push(self.ncn.clone());
        account_infos.push(self.vault.clone());
        account_infos.push(self.state.clone());
        account_infos.push(self.authority.clone());
        account_infos.push(self.operator.clone());
        account_infos.push(self.ncn_operator_state.clone());
        account_infos.push(self.operator_vault_ticket.clone());
        account_infos.push(self.vault_operator_delegation.clone());
        account_infos.push(self.lut_signer.clone());
        account_infos.push(self.lut.clone());
        account_infos.push(self.address_lookup_table_program.clone());
        account_infos.push(self.payer.clone());
        account_infos.push(self.system_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `OracleSyncLut` via CPI.
///
/// ### Accounts:
///
///   0. `[]` oracle
///   1. `[]` queue
///   2. `[]` ncn
///   3. `[]` vault
///   4. `[]` state
///   5. `[signer]` authority
///   6. `[]` operator
///   7. `[]` ncn_operator_state
///   8. `[]` operator_vault_ticket
///   9. `[]` vault_operator_delegation
///   10. `[]` lut_signer
///   11. `[writable]` lut
///   12. `[]` address_lookup_table_program
///   13. `[signer]` payer
///   14. `[]` system_program
#[derive(Clone, Debug)]
pub struct OracleSyncLutCpiBuilder<'a, 'b> {
    instruction: Box<OracleSyncLutCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> OracleSyncLutCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(OracleSyncLutCpiBuilderInstruction {
            __program: program,
            oracle: None,
            queue: None,
            ncn: None,
            vault: None,
            state: None,
            authority: None,
            operator: None,
            ncn_operator_state: None,
            operator_vault_ticket: None,
            vault_operator_delegation: None,
            lut_signer: None,
            lut: None,
            address_lookup_table_program: None,
            payer: None,
            system_program: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn oracle(&mut self, oracle: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.oracle = Some(oracle);
        self
    }
    #[inline(always)]
    pub fn queue(&mut self, queue: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.queue = Some(queue);
        self
    }
    #[inline(always)]
    pub fn ncn(&mut self, ncn: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.ncn = Some(ncn);
        self
    }
    #[inline(always)]
    pub fn vault(&mut self, vault: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.vault = Some(vault);
        self
    }
    #[inline(always)]
    pub fn state(&mut self, state: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.state = Some(state);
        self
    }
    #[inline(always)]
    pub fn authority(&mut self, authority: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.authority = Some(authority);
        self
    }
    #[inline(always)]
    pub fn operator(&mut self, operator: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.operator = Some(operator);
        self
    }
    #[inline(always)]
    pub fn ncn_operator_state(
        &mut self,
        ncn_operator_state: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.ncn_operator_state = Some(ncn_operator_state);
        self
    }
    #[inline(always)]
    pub fn operator_vault_ticket(
        &mut self,
        operator_vault_ticket: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.operator_vault_ticket = Some(operator_vault_ticket);
        self
    }
    #[inline(always)]
    pub fn vault_operator_delegation(
        &mut self,
        vault_operator_delegation: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.vault_operator_delegation = Some(vault_operator_delegation);
        self
    }
    #[inline(always)]
    pub fn lut_signer(
        &mut self,
        lut_signer: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.lut_signer = Some(lut_signer);
        self
    }
    #[inline(always)]
    pub fn lut(&mut self, lut: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.lut = Some(lut);
        self
    }
    #[inline(always)]
    pub fn address_lookup_table_program(
        &mut self,
        address_lookup_table_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.address_lookup_table_program = Some(address_lookup_table_program);
        self
    }
    #[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.payer = Some(payer);
        self
    }
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        let instruction = OracleSyncLutCpi {
            __program: self.instruction.__program,

            oracle: self.instruction.oracle.expect("oracle is not set"),

            queue: self.instruction.queue.expect("queue is not set"),

            ncn: self.instruction.ncn.expect("ncn is not set"),

            vault: self.instruction.vault.expect("vault is not set"),

            state: self.instruction.state.expect("state is not set"),

            authority: self.instruction.authority.expect("authority is not set"),

            operator: self.instruction.operator.expect("operator is not set"),

            ncn_operator_state: self
                .instruction
                .ncn_operator_state
                .expect("ncn_operator_state is not set"),

            operator_vault_ticket: self
                .instruction
                .operator_vault_ticket
                .expect("operator_vault_ticket is not set"),

            vault_operator_delegation: self
                .instruction
                .vault_operator_delegation
                .expect("vault_operator_delegation is not set"),

            lut_signer: self.instruction.lut_signer.expect("lut_signer is not set"),

            lut: self.instruction.lut.expect("lut is not set"),

            address_lookup_table_program: self
                .instruction
                .address_lookup_table_program
                .expect("address_lookup_table_program is not set"),

            payer: self.instruction.payer.expect("payer is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct OracleSyncLutCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    oracle: Option<&'b solana_account_info::AccountInfo<'a>>,
    queue: Option<&'b solana_account_info::AccountInfo<'a>>,
    ncn: Option<&'b solana_account_info::AccountInfo<'a>>,
    vault: Option<&'b solana_account_info::AccountInfo<'a>>,
    state: Option<&'b solana_account_info::AccountInfo<'a>>,
    authority: Option<&'b solana_account_info::AccountInfo<'a>>,
    operator: Option<&'b solana_account_info::AccountInfo<'a>>,
    ncn_operator_state: Option<&'b solana_account_info::AccountInfo<'a>>,
    operator_vault_ticket: Option<&'b solana_account_info::AccountInfo<'a>>,
    vault_operator_delegation: Option<&'b solana_account_info::AccountInfo<'a>>,
    lut_signer: Option<&'b solana_account_info::AccountInfo<'a>>,
    lut: Option<&'b solana_account_info::AccountInfo<'a>>,
    address_lookup_table_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    payer: Option<&'b solana_account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
