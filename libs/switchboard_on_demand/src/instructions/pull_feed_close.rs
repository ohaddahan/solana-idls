//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
#[derive(Debug)]
pub struct PullFeedClose {
    pub pull_feed: solana_pubkey::Pubkey,

    pub reward_escrow: solana_pubkey::Pubkey,

    pub lut: solana_pubkey::Pubkey,

    pub lut_signer: solana_pubkey::Pubkey,

    pub payer: solana_pubkey::Pubkey,

    pub state: solana_pubkey::Pubkey,

    pub authority: solana_pubkey::Pubkey,

    pub token_program: solana_pubkey::Pubkey,

    pub associated_token_program: solana_pubkey::Pubkey,

    pub system_program: solana_pubkey::Pubkey,

    pub address_lookup_table_program: solana_pubkey::Pubkey,
}

impl PullFeedClose {
    pub fn instruction(&self) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(11 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(self.pull_feed, false));
        accounts.push(solana_instruction::AccountMeta::new(
            self.reward_escrow,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.lut, false));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.lut_signer,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.payer, true));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.state, false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.authority, true));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.associated_token_program,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.address_lookup_table_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = borsh::to_vec(&PullFeedCloseInstructionData::new()).unwrap();

        solana_instruction::Instruction {
            program_id: crate::SB_ON_DEMAND_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct PullFeedCloseInstructionData {
    discriminator: [u8; 8],
}

impl PullFeedCloseInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [19, 134, 50, 142, 177, 215, 196, 83],
        }
    }
}

impl Default for PullFeedCloseInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

/// Instruction builder for `PullFeedClose`.
///
/// ### Accounts:
///
///   0. `[writable]` pull_feed
///   1. `[writable]` reward_escrow
///   2. `[writable]` lut
///   3. `[]` lut_signer
///   4. `[writable, signer]` payer
///   5. `[]` state
///   6. `[writable, signer]` authority
///   7. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   8. `[optional]` associated_token_program (default to `ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL`)
///   9. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   10. `[optional]` address_lookup_table_program (default to `AddressLookupTab1e1111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct PullFeedCloseBuilder {
    pull_feed: Option<solana_pubkey::Pubkey>,
    reward_escrow: Option<solana_pubkey::Pubkey>,
    lut: Option<solana_pubkey::Pubkey>,
    lut_signer: Option<solana_pubkey::Pubkey>,
    payer: Option<solana_pubkey::Pubkey>,
    state: Option<solana_pubkey::Pubkey>,
    authority: Option<solana_pubkey::Pubkey>,
    token_program: Option<solana_pubkey::Pubkey>,
    associated_token_program: Option<solana_pubkey::Pubkey>,
    system_program: Option<solana_pubkey::Pubkey>,
    address_lookup_table_program: Option<solana_pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl PullFeedCloseBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn pull_feed(&mut self, pull_feed: solana_pubkey::Pubkey) -> &mut Self {
        self.pull_feed = Some(pull_feed);
        self
    }
    #[inline(always)]
    pub fn reward_escrow(&mut self, reward_escrow: solana_pubkey::Pubkey) -> &mut Self {
        self.reward_escrow = Some(reward_escrow);
        self
    }
    #[inline(always)]
    pub fn lut(&mut self, lut: solana_pubkey::Pubkey) -> &mut Self {
        self.lut = Some(lut);
        self
    }
    #[inline(always)]
    pub fn lut_signer(&mut self, lut_signer: solana_pubkey::Pubkey) -> &mut Self {
        self.lut_signer = Some(lut_signer);
        self
    }
    #[inline(always)]
    pub fn payer(&mut self, payer: solana_pubkey::Pubkey) -> &mut Self {
        self.payer = Some(payer);
        self
    }
    #[inline(always)]
    pub fn state(&mut self, state: solana_pubkey::Pubkey) -> &mut Self {
        self.state = Some(state);
        self
    }
    #[inline(always)]
    pub fn authority(&mut self, authority: solana_pubkey::Pubkey) -> &mut Self {
        self.authority = Some(authority);
        self
    }
    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }
    /// `[optional account, default to 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL']`
    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.associated_token_program = Some(associated_token_program);
        self
    }
    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }
    /// `[optional account, default to 'AddressLookupTab1e1111111111111111111111111']`
    #[inline(always)]
    pub fn address_lookup_table_program(
        &mut self,
        address_lookup_table_program: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.address_lookup_table_program = Some(address_lookup_table_program);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = PullFeedClose {
            pull_feed: self.pull_feed.expect("pull_feed is not set"),
            reward_escrow: self.reward_escrow.expect("reward_escrow is not set"),
            lut: self.lut.expect("lut is not set"),
            lut_signer: self.lut_signer.expect("lut_signer is not set"),
            payer: self.payer.expect("payer is not set"),
            state: self.state.expect("state is not set"),
            authority: self.authority.expect("authority is not set"),
            token_program: self.token_program.unwrap_or(solana_pubkey::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            associated_token_program: self.associated_token_program.unwrap_or(
                solana_pubkey::pubkey!("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"),
            ),
            system_program: self
                .system_program
                .unwrap_or(solana_pubkey::pubkey!("11111111111111111111111111111111")),
            address_lookup_table_program: self.address_lookup_table_program.unwrap_or(
                solana_pubkey::pubkey!("AddressLookupTab1e1111111111111111111111111"),
            ),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `pull_feed_close` CPI accounts.
pub struct PullFeedCloseCpiAccounts<'a, 'b> {
    pub pull_feed: &'b solana_account_info::AccountInfo<'a>,

    pub reward_escrow: &'b solana_account_info::AccountInfo<'a>,

    pub lut: &'b solana_account_info::AccountInfo<'a>,

    pub lut_signer: &'b solana_account_info::AccountInfo<'a>,

    pub payer: &'b solana_account_info::AccountInfo<'a>,

    pub state: &'b solana_account_info::AccountInfo<'a>,

    pub authority: &'b solana_account_info::AccountInfo<'a>,

    pub token_program: &'b solana_account_info::AccountInfo<'a>,

    pub associated_token_program: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,

    pub address_lookup_table_program: &'b solana_account_info::AccountInfo<'a>,
}

/// `pull_feed_close` CPI instruction.
pub struct PullFeedCloseCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,

    pub pull_feed: &'b solana_account_info::AccountInfo<'a>,

    pub reward_escrow: &'b solana_account_info::AccountInfo<'a>,

    pub lut: &'b solana_account_info::AccountInfo<'a>,

    pub lut_signer: &'b solana_account_info::AccountInfo<'a>,

    pub payer: &'b solana_account_info::AccountInfo<'a>,

    pub state: &'b solana_account_info::AccountInfo<'a>,

    pub authority: &'b solana_account_info::AccountInfo<'a>,

    pub token_program: &'b solana_account_info::AccountInfo<'a>,

    pub associated_token_program: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,

    pub address_lookup_table_program: &'b solana_account_info::AccountInfo<'a>,
}

impl<'a, 'b> PullFeedCloseCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: PullFeedCloseCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            pull_feed: accounts.pull_feed,
            reward_escrow: accounts.reward_escrow,
            lut: accounts.lut,
            lut_signer: accounts.lut_signer,
            payer: accounts.payer,
            state: accounts.state,
            authority: accounts.authority,
            token_program: accounts.token_program,
            associated_token_program: accounts.associated_token_program,
            system_program: accounts.system_program,
            address_lookup_table_program: accounts.address_lookup_table_program,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(11 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(
            *self.pull_feed.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.reward_escrow.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(*self.lut.key, false));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.lut_signer.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(*self.payer.key, true));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.state.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.authority.key,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.associated_token_program.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.address_lookup_table_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = borsh::to_vec(&PullFeedCloseInstructionData::new()).unwrap();

        let instruction = solana_instruction::Instruction {
            program_id: crate::SB_ON_DEMAND_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(12 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.pull_feed.clone());
        account_infos.push(self.reward_escrow.clone());
        account_infos.push(self.lut.clone());
        account_infos.push(self.lut_signer.clone());
        account_infos.push(self.payer.clone());
        account_infos.push(self.state.clone());
        account_infos.push(self.authority.clone());
        account_infos.push(self.token_program.clone());
        account_infos.push(self.associated_token_program.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.address_lookup_table_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `PullFeedClose` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` pull_feed
///   1. `[writable]` reward_escrow
///   2. `[writable]` lut
///   3. `[]` lut_signer
///   4. `[writable, signer]` payer
///   5. `[]` state
///   6. `[writable, signer]` authority
///   7. `[]` token_program
///   8. `[]` associated_token_program
///   9. `[]` system_program
///   10. `[]` address_lookup_table_program
#[derive(Clone, Debug)]
pub struct PullFeedCloseCpiBuilder<'a, 'b> {
    instruction: Box<PullFeedCloseCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> PullFeedCloseCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(PullFeedCloseCpiBuilderInstruction {
            __program: program,
            pull_feed: None,
            reward_escrow: None,
            lut: None,
            lut_signer: None,
            payer: None,
            state: None,
            authority: None,
            token_program: None,
            associated_token_program: None,
            system_program: None,
            address_lookup_table_program: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn pull_feed(&mut self, pull_feed: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.pull_feed = Some(pull_feed);
        self
    }
    #[inline(always)]
    pub fn reward_escrow(
        &mut self,
        reward_escrow: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.reward_escrow = Some(reward_escrow);
        self
    }
    #[inline(always)]
    pub fn lut(&mut self, lut: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.lut = Some(lut);
        self
    }
    #[inline(always)]
    pub fn lut_signer(
        &mut self,
        lut_signer: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.lut_signer = Some(lut_signer);
        self
    }
    #[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.payer = Some(payer);
        self
    }
    #[inline(always)]
    pub fn state(&mut self, state: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.state = Some(state);
        self
    }
    #[inline(always)]
    pub fn authority(&mut self, authority: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.authority = Some(authority);
        self
    }
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }
    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.associated_token_program = Some(associated_token_program);
        self
    }
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }
    #[inline(always)]
    pub fn address_lookup_table_program(
        &mut self,
        address_lookup_table_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.address_lookup_table_program = Some(address_lookup_table_program);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        let instruction = PullFeedCloseCpi {
            __program: self.instruction.__program,

            pull_feed: self.instruction.pull_feed.expect("pull_feed is not set"),

            reward_escrow: self
                .instruction
                .reward_escrow
                .expect("reward_escrow is not set"),

            lut: self.instruction.lut.expect("lut is not set"),

            lut_signer: self.instruction.lut_signer.expect("lut_signer is not set"),

            payer: self.instruction.payer.expect("payer is not set"),

            state: self.instruction.state.expect("state is not set"),

            authority: self.instruction.authority.expect("authority is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),

            associated_token_program: self
                .instruction
                .associated_token_program
                .expect("associated_token_program is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            address_lookup_table_program: self
                .instruction
                .address_lookup_table_program
                .expect("address_lookup_table_program is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct PullFeedCloseCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    pull_feed: Option<&'b solana_account_info::AccountInfo<'a>>,
    reward_escrow: Option<&'b solana_account_info::AccountInfo<'a>>,
    lut: Option<&'b solana_account_info::AccountInfo<'a>>,
    lut_signer: Option<&'b solana_account_info::AccountInfo<'a>>,
    payer: Option<&'b solana_account_info::AccountInfo<'a>>,
    state: Option<&'b solana_account_info::AccountInfo<'a>>,
    authority: Option<&'b solana_account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    associated_token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    address_lookup_table_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
