//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
#[derive(Debug)]
pub struct OracleResetLut {
    pub oracle: solana_pubkey::Pubkey,

    pub authority: solana_pubkey::Pubkey,

    pub payer: solana_pubkey::Pubkey,

    pub system_program: solana_pubkey::Pubkey,

    pub program_state: solana_pubkey::Pubkey,

    pub lut_signer: solana_pubkey::Pubkey,

    pub lut: solana_pubkey::Pubkey,

    pub address_lookup_table_program: solana_pubkey::Pubkey,
}

impl OracleResetLut {
    pub fn instruction(
        &self,
        args: OracleResetLutInstructionArgs,
    ) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: OracleResetLutInstructionArgs,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(8 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(self.oracle, false));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.authority,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.payer, true));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.program_state,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.lut_signer,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.lut, false));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.address_lookup_table_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&OracleResetLutInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_instruction::Instruction {
            program_id: crate::SB_ON_DEMAND_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct OracleResetLutInstructionData {
    discriminator: [u8; 8],
}

impl OracleResetLutInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [147, 244, 108, 198, 152, 219, 0, 22],
        }
    }
}

impl Default for OracleResetLutInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct OracleResetLutInstructionArgs {
    pub recent_slot: u64,
}

/// Instruction builder for `OracleResetLut`.
///
/// ### Accounts:
///
///   0. `[writable]` oracle
///   1. `[signer]` authority
///   2. `[writable, signer]` payer
///   3. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   4. `[]` program_state
///   5. `[]` lut_signer
///   6. `[writable]` lut
///   7. `[optional]` address_lookup_table_program (default to `AddressLookupTab1e1111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct OracleResetLutBuilder {
    oracle: Option<solana_pubkey::Pubkey>,
    authority: Option<solana_pubkey::Pubkey>,
    payer: Option<solana_pubkey::Pubkey>,
    system_program: Option<solana_pubkey::Pubkey>,
    program_state: Option<solana_pubkey::Pubkey>,
    lut_signer: Option<solana_pubkey::Pubkey>,
    lut: Option<solana_pubkey::Pubkey>,
    address_lookup_table_program: Option<solana_pubkey::Pubkey>,
    recent_slot: Option<u64>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl OracleResetLutBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn oracle(&mut self, oracle: solana_pubkey::Pubkey) -> &mut Self {
        self.oracle = Some(oracle);
        self
    }
    #[inline(always)]
    pub fn authority(&mut self, authority: solana_pubkey::Pubkey) -> &mut Self {
        self.authority = Some(authority);
        self
    }
    #[inline(always)]
    pub fn payer(&mut self, payer: solana_pubkey::Pubkey) -> &mut Self {
        self.payer = Some(payer);
        self
    }
    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }
    #[inline(always)]
    pub fn program_state(&mut self, program_state: solana_pubkey::Pubkey) -> &mut Self {
        self.program_state = Some(program_state);
        self
    }
    #[inline(always)]
    pub fn lut_signer(&mut self, lut_signer: solana_pubkey::Pubkey) -> &mut Self {
        self.lut_signer = Some(lut_signer);
        self
    }
    #[inline(always)]
    pub fn lut(&mut self, lut: solana_pubkey::Pubkey) -> &mut Self {
        self.lut = Some(lut);
        self
    }
    /// `[optional account, default to 'AddressLookupTab1e1111111111111111111111111']`
    #[inline(always)]
    pub fn address_lookup_table_program(
        &mut self,
        address_lookup_table_program: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.address_lookup_table_program = Some(address_lookup_table_program);
        self
    }
    #[inline(always)]
    pub fn recent_slot(&mut self, recent_slot: u64) -> &mut Self {
        self.recent_slot = Some(recent_slot);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = OracleResetLut {
            oracle: self.oracle.expect("oracle is not set"),
            authority: self.authority.expect("authority is not set"),
            payer: self.payer.expect("payer is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_pubkey::pubkey!("11111111111111111111111111111111")),
            program_state: self.program_state.expect("program_state is not set"),
            lut_signer: self.lut_signer.expect("lut_signer is not set"),
            lut: self.lut.expect("lut is not set"),
            address_lookup_table_program: self.address_lookup_table_program.unwrap_or(
                solana_pubkey::pubkey!("AddressLookupTab1e1111111111111111111111111"),
            ),
        };
        let args = OracleResetLutInstructionArgs {
            recent_slot: self.recent_slot.clone().expect("recent_slot is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `oracle_reset_lut` CPI accounts.
pub struct OracleResetLutCpiAccounts<'a, 'b> {
    pub oracle: &'b solana_account_info::AccountInfo<'a>,

    pub authority: &'b solana_account_info::AccountInfo<'a>,

    pub payer: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,

    pub program_state: &'b solana_account_info::AccountInfo<'a>,

    pub lut_signer: &'b solana_account_info::AccountInfo<'a>,

    pub lut: &'b solana_account_info::AccountInfo<'a>,

    pub address_lookup_table_program: &'b solana_account_info::AccountInfo<'a>,
}

/// `oracle_reset_lut` CPI instruction.
pub struct OracleResetLutCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,

    pub oracle: &'b solana_account_info::AccountInfo<'a>,

    pub authority: &'b solana_account_info::AccountInfo<'a>,

    pub payer: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,

    pub program_state: &'b solana_account_info::AccountInfo<'a>,

    pub lut_signer: &'b solana_account_info::AccountInfo<'a>,

    pub lut: &'b solana_account_info::AccountInfo<'a>,

    pub address_lookup_table_program: &'b solana_account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: OracleResetLutInstructionArgs,
}

impl<'a, 'b> OracleResetLutCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: OracleResetLutCpiAccounts<'a, 'b>,
        args: OracleResetLutInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            oracle: accounts.oracle,
            authority: accounts.authority,
            payer: accounts.payer,
            system_program: accounts.system_program,
            program_state: accounts.program_state,
            lut_signer: accounts.lut_signer,
            lut: accounts.lut,
            address_lookup_table_program: accounts.address_lookup_table_program,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(8 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(
            *self.oracle.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.authority.key,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new(*self.payer.key, true));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.program_state.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.lut_signer.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(*self.lut.key, false));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.address_lookup_table_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&OracleResetLutInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_instruction::Instruction {
            program_id: crate::SB_ON_DEMAND_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(9 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.oracle.clone());
        account_infos.push(self.authority.clone());
        account_infos.push(self.payer.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.program_state.clone());
        account_infos.push(self.lut_signer.clone());
        account_infos.push(self.lut.clone());
        account_infos.push(self.address_lookup_table_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `OracleResetLut` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` oracle
///   1. `[signer]` authority
///   2. `[writable, signer]` payer
///   3. `[]` system_program
///   4. `[]` program_state
///   5. `[]` lut_signer
///   6. `[writable]` lut
///   7. `[]` address_lookup_table_program
#[derive(Clone, Debug)]
pub struct OracleResetLutCpiBuilder<'a, 'b> {
    instruction: Box<OracleResetLutCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> OracleResetLutCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(OracleResetLutCpiBuilderInstruction {
            __program: program,
            oracle: None,
            authority: None,
            payer: None,
            system_program: None,
            program_state: None,
            lut_signer: None,
            lut: None,
            address_lookup_table_program: None,
            recent_slot: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn oracle(&mut self, oracle: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.oracle = Some(oracle);
        self
    }
    #[inline(always)]
    pub fn authority(&mut self, authority: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.authority = Some(authority);
        self
    }
    #[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.payer = Some(payer);
        self
    }
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }
    #[inline(always)]
    pub fn program_state(
        &mut self,
        program_state: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.program_state = Some(program_state);
        self
    }
    #[inline(always)]
    pub fn lut_signer(
        &mut self,
        lut_signer: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.lut_signer = Some(lut_signer);
        self
    }
    #[inline(always)]
    pub fn lut(&mut self, lut: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.lut = Some(lut);
        self
    }
    #[inline(always)]
    pub fn address_lookup_table_program(
        &mut self,
        address_lookup_table_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.address_lookup_table_program = Some(address_lookup_table_program);
        self
    }
    #[inline(always)]
    pub fn recent_slot(&mut self, recent_slot: u64) -> &mut Self {
        self.instruction.recent_slot = Some(recent_slot);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        let args = OracleResetLutInstructionArgs {
            recent_slot: self
                .instruction
                .recent_slot
                .clone()
                .expect("recent_slot is not set"),
        };
        let instruction = OracleResetLutCpi {
            __program: self.instruction.__program,

            oracle: self.instruction.oracle.expect("oracle is not set"),

            authority: self.instruction.authority.expect("authority is not set"),

            payer: self.instruction.payer.expect("payer is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            program_state: self
                .instruction
                .program_state
                .expect("program_state is not set"),

            lut_signer: self.instruction.lut_signer.expect("lut_signer is not set"),

            lut: self.instruction.lut.expect("lut is not set"),

            address_lookup_table_program: self
                .instruction
                .address_lookup_table_program
                .expect("address_lookup_table_program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct OracleResetLutCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    oracle: Option<&'b solana_account_info::AccountInfo<'a>>,
    authority: Option<&'b solana_account_info::AccountInfo<'a>>,
    payer: Option<&'b solana_account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    program_state: Option<&'b solana_account_info::AccountInfo<'a>>,
    lut_signer: Option<&'b solana_account_info::AccountInfo<'a>>,
    lut: Option<&'b solana_account_info::AccountInfo<'a>>,
    address_lookup_table_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    recent_slot: Option<u64>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
