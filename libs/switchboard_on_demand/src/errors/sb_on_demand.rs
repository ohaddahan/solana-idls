//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use num_derive::FromPrimitive;
use thiserror::Error;

#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum SbOnDemandError {
    /// 6000 -
    #[error("")]
    GenericError = 0x1770,
    /// 6001 -
    #[error("")]
    InvalidQuote = 0x1771,
    /// 6002 -
    #[error("")]
    InsufficientQueue = 0x1772,
    /// 6003 -
    #[error("")]
    QueueFull = 0x1773,
    /// 6004 -
    #[error("")]
    InvalidEnclaveSigner = 0x1774,
    /// 6005 -
    #[error("")]
    InvalidSigner = 0x1775,
    /// 6006 -
    #[error("")]
    MrEnclaveAlreadyExists = 0x1776,
    /// 6007 -
    #[error("")]
    MrEnclaveAtCapacity = 0x1777,
    /// 6008 -
    #[error("")]
    MrEnclaveDoesntExist = 0x1778,
    /// 6009 -
    #[error("")]
    PermissionDenied = 0x1779,
    /// 6010 -
    #[error("")]
    InvalidQueue = 0x177A,
    /// 6011 -
    #[error("")]
    IncorrectMrEnclave = 0x177B,
    /// 6012 -
    #[error("")]
    InvalidAuthority = 0x177C,
    /// 6013 -
    #[error("")]
    InvalidMrEnclave = 0x177D,
    /// 6014 -
    #[error("")]
    InvalidTimestamp = 0x177E,
    /// 6015 -
    #[error("")]
    InvalidOracleIdx = 0x177F,
    /// 6016 -
    #[error("")]
    InvalidSecpSignature = 0x1780,
    /// 6017 -
    #[error("")]
    InvalidGuardianQueue = 0x1781,
    /// 6018 -
    #[error("")]
    InvalidIndex = 0x1782,
    /// 6019 -
    #[error("")]
    InvalidOracleQueue = 0x1783,
    /// 6020 -
    #[error("")]
    InvalidPermission = 0x1784,
    /// 6021 -
    #[error("")]
    InvalidePermissionedAccount = 0x1785,
    /// 6022 -
    #[error("")]
    InvalidEpochRotate = 0x1786,
    /// 6023 -
    #[error("")]
    InvalidEpochFinalize = 0x1787,
    /// 6024 -
    #[error("")]
    InvalidEscrow = 0x1788,
    /// 6025 -
    #[error("")]
    IllegalOracle = 0x1789,
    /// 6026 -
    #[error("")]
    IllegalExecuteAttempt = 0x178A,
    /// 6027 -
    #[error("")]
    IllegalFeedValue = 0x178B,
    /// 6028 -
    #[error("")]
    InvalidOracleFeedStats = 0x178C,
    /// 6029 -
    #[error("")]
    InvalidStateAuthority = 0x178D,
    /// 6030 -
    #[error("")]
    NotEnoughSamples = 0x178E,
    /// 6031 -
    #[error("")]
    OracleIsVerified = 0x178F,
    /// 6032 -
    #[error("")]
    QueueIsEmpty = 0x1790,
    /// 6033 -
    #[error("")]
    SecpRecoverFailure = 0x1791,
    /// 6034 -
    #[error("")]
    StaleSample = 0x1792,
    /// 6035 -
    #[error("")]
    SwitchboardRandomnessTooOld = 0x1793,
    /// 6036 -
    #[error("")]
    EpochIdMismatch = 0x1794,
    /// 6037 -
    #[error("")]
    GuardianAlreadyVoted = 0x1795,
    /// 6038 -
    #[error("")]
    RandomnessNotRequested = 0x1796,
    /// 6039 -
    #[error("")]
    InvalidSlotNumber = 0x1797,
    /// 6040 -
    #[error("")]
    RandomnessOracleKeyExpired = 0x1798,
    /// 6041 -
    #[error("")]
    InvalidAdvisory = 0x1799,
    /// 6042 -
    #[error("")]
    InvalidOracleStats = 0x179A,
    /// 6043 -
    #[error("")]
    InvalidStakeProgram = 0x179B,
    /// 6044 -
    #[error("")]
    InvalidStakePool = 0x179C,
    /// 6045 -
    #[error("")]
    InvalidDelegationPool = 0x179D,
    /// 6046 -
    #[error("")]
    UnparsableAccount = 0x179E,
    /// 6047 -
    #[error("")]
    InvalidInstruction = 0x179F,
    /// 6048 -
    #[error("")]
    OracleAlreadyVerified = 0x17A0,
    /// 6049 -
    #[error("")]
    GuardianNotVerified = 0x17A1,
    /// 6050 -
    #[error("")]
    InvalidConstraint = 0x17A2,
    /// 6051 -
    #[error("")]
    InvalidDelegationGroup = 0x17A3,
    /// 6052 -
    #[error("")]
    OracleKeyNotFound = 0x17A4,
    /// 6053 -
    #[error("")]
    GuardianReregisterAttempt = 0x17A5,
    /// 6054 -
    #[error("")]
    InvalidManySubmissionCount = 0x17A6,
    /// 6055 -
    #[error("")]
    MissingSecpIx = 0x17A7,
    /// 6056 -
    #[error("")]
    ChecksumMismatch = 0x17A8,
    /// 6057 -
    #[error("")]
    InvalidSubmissionFeedsCount = 0x17A9,
    /// 6058 -
    #[error("")]
    InvalidSecpSignatureOraclesCount = 0x17AA,
    /// 6059 -
    #[error("")]
    InvalidEthAddress = 0x17AB,
    /// 6060 -
    #[error("")]
    NoLutKeysAdded = 0x17AC,
    /// 6061 -
    #[error("")]
    InvalidVaultOperatorDelegation = 0x17AD,
    /// 6062 -
    #[error("")]
    InvalidVaultTokenAccount = 0x17AE,
    /// 6063 -
    #[error("")]
    InvalidRemainingAccounts = 0x17AF,
    /// 6064 -
    #[error("")]
    SubsidiesNotAllowed = 0x17B0,
    /// 6065 -
    #[error("")]
    MissingVod = 0x17B1,
    /// 6066 -
    #[error("")]
    InvalidVodEpoch = 0x17B2,
    /// 6067 -
    #[error("")]
    InvalidOracleSubsidyWallet = 0x17B3,
    /// 6068 -
    #[error("")]
    InvalidOperator = 0x17B4,
    /// 6069 -
    #[error("")]
    Max128SampleValue = 0x17B5,
    /// 6070 -
    #[error("")]
    RewardAlreadyPaid = 0x17B6,
}

#[allow(deprecated)]
impl solana_program_error::PrintProgramError for SbOnDemandError {
    fn print<E>(&self) {
        solana_msg::msg!(&self.to_string());
    }
}

#[allow(deprecated)]
impl<T> solana_decode_error::DecodeError<T> for SbOnDemandError {
    fn type_of() -> &'static str {
        "SbOnDemandError"
    }
}
