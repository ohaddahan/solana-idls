//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
#[derive(Debug)]
pub struct CancelOrderByClientIdV2 {
    /// market
    pub market: solana_pubkey::Pubkey,
    /// bids
    pub bids: solana_pubkey::Pubkey,
    /// asks
    pub asks: solana_pubkey::Pubkey,
    /// OpenOrders
    pub open_orders: solana_pubkey::Pubkey,
    /// the OpenOrders owner
    pub owner: solana_pubkey::Pubkey,
    /// event_q
    pub event_queue: solana_pubkey::Pubkey,
}

impl CancelOrderByClientIdV2 {
    pub fn instruction(
        &self,
        args: CancelOrderByClientIdV2InstructionArgs,
    ) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: CancelOrderByClientIdV2InstructionArgs,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(6 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(self.market, false));
        accounts.push(solana_instruction::AccountMeta::new(self.bids, false));
        accounts.push(solana_instruction::AccountMeta::new(self.asks, false));
        accounts.push(solana_instruction::AccountMeta::new(
            self.open_orders,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.owner, true,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.event_queue,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&CancelOrderByClientIdV2InstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_instruction::Instruction {
            program_id: crate::OPEN_BOOK_DEX_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CancelOrderByClientIdV2InstructionData {
    discriminator: [u8; 8],
}

impl CancelOrderByClientIdV2InstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [233, 134, 190, 180, 125, 59, 19, 171],
        }
    }
}

impl Default for CancelOrderByClientIdV2InstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CancelOrderByClientIdV2InstructionArgs {
    pub client_order_id: u64,
}

/// Instruction builder for `CancelOrderByClientIdV2`.
///
/// ### Accounts:
///
///   0. `[writable]` market
///   1. `[writable]` bids
///   2. `[writable]` asks
///   3. `[writable]` open_orders
///   4. `[signer]` owner
///   5. `[writable]` event_queue
#[derive(Clone, Debug, Default)]
pub struct CancelOrderByClientIdV2Builder {
    market: Option<solana_pubkey::Pubkey>,
    bids: Option<solana_pubkey::Pubkey>,
    asks: Option<solana_pubkey::Pubkey>,
    open_orders: Option<solana_pubkey::Pubkey>,
    owner: Option<solana_pubkey::Pubkey>,
    event_queue: Option<solana_pubkey::Pubkey>,
    client_order_id: Option<u64>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl CancelOrderByClientIdV2Builder {
    pub fn new() -> Self {
        Self::default()
    }
    /// market
    #[inline(always)]
    pub fn market(&mut self, market: solana_pubkey::Pubkey) -> &mut Self {
        self.market = Some(market);
        self
    }
    /// bids
    #[inline(always)]
    pub fn bids(&mut self, bids: solana_pubkey::Pubkey) -> &mut Self {
        self.bids = Some(bids);
        self
    }
    /// asks
    #[inline(always)]
    pub fn asks(&mut self, asks: solana_pubkey::Pubkey) -> &mut Self {
        self.asks = Some(asks);
        self
    }
    /// OpenOrders
    #[inline(always)]
    pub fn open_orders(&mut self, open_orders: solana_pubkey::Pubkey) -> &mut Self {
        self.open_orders = Some(open_orders);
        self
    }
    /// the OpenOrders owner
    #[inline(always)]
    pub fn owner(&mut self, owner: solana_pubkey::Pubkey) -> &mut Self {
        self.owner = Some(owner);
        self
    }
    /// event_q
    #[inline(always)]
    pub fn event_queue(&mut self, event_queue: solana_pubkey::Pubkey) -> &mut Self {
        self.event_queue = Some(event_queue);
        self
    }
    #[inline(always)]
    pub fn client_order_id(&mut self, client_order_id: u64) -> &mut Self {
        self.client_order_id = Some(client_order_id);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = CancelOrderByClientIdV2 {
            market: self.market.expect("market is not set"),
            bids: self.bids.expect("bids is not set"),
            asks: self.asks.expect("asks is not set"),
            open_orders: self.open_orders.expect("open_orders is not set"),
            owner: self.owner.expect("owner is not set"),
            event_queue: self.event_queue.expect("event_queue is not set"),
        };
        let args = CancelOrderByClientIdV2InstructionArgs {
            client_order_id: self
                .client_order_id
                .clone()
                .expect("client_order_id is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `cancel_order_by_client_id_v2` CPI accounts.
pub struct CancelOrderByClientIdV2CpiAccounts<'a, 'b> {
    /// market
    pub market: &'b solana_account_info::AccountInfo<'a>,
    /// bids
    pub bids: &'b solana_account_info::AccountInfo<'a>,
    /// asks
    pub asks: &'b solana_account_info::AccountInfo<'a>,
    /// OpenOrders
    pub open_orders: &'b solana_account_info::AccountInfo<'a>,
    /// the OpenOrders owner
    pub owner: &'b solana_account_info::AccountInfo<'a>,
    /// event_q
    pub event_queue: &'b solana_account_info::AccountInfo<'a>,
}

/// `cancel_order_by_client_id_v2` CPI instruction.
pub struct CancelOrderByClientIdV2Cpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,
    /// market
    pub market: &'b solana_account_info::AccountInfo<'a>,
    /// bids
    pub bids: &'b solana_account_info::AccountInfo<'a>,
    /// asks
    pub asks: &'b solana_account_info::AccountInfo<'a>,
    /// OpenOrders
    pub open_orders: &'b solana_account_info::AccountInfo<'a>,
    /// the OpenOrders owner
    pub owner: &'b solana_account_info::AccountInfo<'a>,
    /// event_q
    pub event_queue: &'b solana_account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: CancelOrderByClientIdV2InstructionArgs,
}

impl<'a, 'b> CancelOrderByClientIdV2Cpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: CancelOrderByClientIdV2CpiAccounts<'a, 'b>,
        args: CancelOrderByClientIdV2InstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            market: accounts.market,
            bids: accounts.bids,
            asks: accounts.asks,
            open_orders: accounts.open_orders,
            owner: accounts.owner,
            event_queue: accounts.event_queue,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(6 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(
            *self.market.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(*self.bids.key, false));
        accounts.push(solana_instruction::AccountMeta::new(*self.asks.key, false));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.open_orders.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.owner.key,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.event_queue.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&CancelOrderByClientIdV2InstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_instruction::Instruction {
            program_id: crate::OPEN_BOOK_DEX_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(7 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.market.clone());
        account_infos.push(self.bids.clone());
        account_infos.push(self.asks.clone());
        account_infos.push(self.open_orders.clone());
        account_infos.push(self.owner.clone());
        account_infos.push(self.event_queue.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `CancelOrderByClientIdV2` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` market
///   1. `[writable]` bids
///   2. `[writable]` asks
///   3. `[writable]` open_orders
///   4. `[signer]` owner
///   5. `[writable]` event_queue
#[derive(Clone, Debug)]
pub struct CancelOrderByClientIdV2CpiBuilder<'a, 'b> {
    instruction: Box<CancelOrderByClientIdV2CpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> CancelOrderByClientIdV2CpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(CancelOrderByClientIdV2CpiBuilderInstruction {
            __program: program,
            market: None,
            bids: None,
            asks: None,
            open_orders: None,
            owner: None,
            event_queue: None,
            client_order_id: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    /// market
    #[inline(always)]
    pub fn market(&mut self, market: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.market = Some(market);
        self
    }
    /// bids
    #[inline(always)]
    pub fn bids(&mut self, bids: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.bids = Some(bids);
        self
    }
    /// asks
    #[inline(always)]
    pub fn asks(&mut self, asks: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.asks = Some(asks);
        self
    }
    /// OpenOrders
    #[inline(always)]
    pub fn open_orders(
        &mut self,
        open_orders: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.open_orders = Some(open_orders);
        self
    }
    /// the OpenOrders owner
    #[inline(always)]
    pub fn owner(&mut self, owner: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.owner = Some(owner);
        self
    }
    /// event_q
    #[inline(always)]
    pub fn event_queue(
        &mut self,
        event_queue: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.event_queue = Some(event_queue);
        self
    }
    #[inline(always)]
    pub fn client_order_id(&mut self, client_order_id: u64) -> &mut Self {
        self.instruction.client_order_id = Some(client_order_id);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        let args = CancelOrderByClientIdV2InstructionArgs {
            client_order_id: self
                .instruction
                .client_order_id
                .clone()
                .expect("client_order_id is not set"),
        };
        let instruction = CancelOrderByClientIdV2Cpi {
            __program: self.instruction.__program,

            market: self.instruction.market.expect("market is not set"),

            bids: self.instruction.bids.expect("bids is not set"),

            asks: self.instruction.asks.expect("asks is not set"),

            open_orders: self
                .instruction
                .open_orders
                .expect("open_orders is not set"),

            owner: self.instruction.owner.expect("owner is not set"),

            event_queue: self
                .instruction
                .event_queue
                .expect("event_queue is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct CancelOrderByClientIdV2CpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    market: Option<&'b solana_account_info::AccountInfo<'a>>,
    bids: Option<&'b solana_account_info::AccountInfo<'a>>,
    asks: Option<&'b solana_account_info::AccountInfo<'a>>,
    open_orders: Option<&'b solana_account_info::AccountInfo<'a>>,
    owner: Option<&'b solana_account_info::AccountInfo<'a>>,
    event_queue: Option<&'b solana_account_info::AccountInfo<'a>>,
    client_order_id: Option<u64>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
