//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use crate::types::NewOrderInstructionV3;
use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
#[derive(Debug)]
pub struct NewOrderV3 {
    /// the market
    pub market: solana_pubkey::Pubkey,
    /// the OpenOrders account to use
    pub open_orders: solana_pubkey::Pubkey,
    /// the request queue
    pub request_queue: solana_pubkey::Pubkey,
    /// the event queue
    pub event_queue: solana_pubkey::Pubkey,
    /// bids
    pub bids: solana_pubkey::Pubkey,
    /// asks
    pub asks: solana_pubkey::Pubkey,
    /// the (coin or price currency) account paying for the order
    pub order_payer: solana_pubkey::Pubkey,
    /// owner of the OpenOrders account
    pub owner: solana_pubkey::Pubkey,
    /// coin vault
    pub coin_vault: solana_pubkey::Pubkey,
    /// pc vault
    pub pc_vault: solana_pubkey::Pubkey,
    /// spl token program
    pub spl_token_program: solana_pubkey::Pubkey,
    /// the rent sysvar
    pub rent_sysvar: solana_pubkey::Pubkey,
    /// (optional) the (M)SRM account used for fee discounts
    pub fee_discounts: Option<solana_pubkey::Pubkey>,
}

impl NewOrderV3 {
    pub fn instruction(&self, args: NewOrderV3InstructionArgs) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: NewOrderV3InstructionArgs,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(13 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(self.market, false));
        accounts.push(solana_instruction::AccountMeta::new(
            self.open_orders,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.request_queue,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.event_queue,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.bids, false));
        accounts.push(solana_instruction::AccountMeta::new(self.asks, false));
        accounts.push(solana_instruction::AccountMeta::new(
            self.order_payer,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.owner, true,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.coin_vault, false));
        accounts.push(solana_instruction::AccountMeta::new(self.pc_vault, false));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.spl_token_program,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.rent_sysvar,
            false,
        ));
        if let Some(fee_discounts) = self.fee_discounts {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                fee_discounts,
                false,
            ));
        } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::OPEN_BOOK_DEX_ID,
                false,
            ));
        }
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&NewOrderV3InstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_instruction::Instruction {
            program_id: crate::OPEN_BOOK_DEX_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct NewOrderV3InstructionData {
    discriminator: [u8; 8],
}

impl NewOrderV3InstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [70, 208, 211, 251, 217, 236, 66, 174],
        }
    }
}

impl Default for NewOrderV3InstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct NewOrderV3InstructionArgs {
    pub args: NewOrderInstructionV3,
}

/// Instruction builder for `NewOrderV3`.
///
/// ### Accounts:
///
///   0. `[writable]` market
///   1. `[writable]` open_orders
///   2. `[writable]` request_queue
///   3. `[writable]` event_queue
///   4. `[writable]` bids
///   5. `[writable]` asks
///   6. `[writable]` order_payer
///   7. `[signer]` owner
///   8. `[writable]` coin_vault
///   9. `[writable]` pc_vault
///   10. `[optional]` spl_token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   11. `[optional]` rent_sysvar (default to `SysvarRent111111111111111111111111111111111`)
///   12. `[optional]` fee_discounts
#[derive(Clone, Debug, Default)]
pub struct NewOrderV3Builder {
    market: Option<solana_pubkey::Pubkey>,
    open_orders: Option<solana_pubkey::Pubkey>,
    request_queue: Option<solana_pubkey::Pubkey>,
    event_queue: Option<solana_pubkey::Pubkey>,
    bids: Option<solana_pubkey::Pubkey>,
    asks: Option<solana_pubkey::Pubkey>,
    order_payer: Option<solana_pubkey::Pubkey>,
    owner: Option<solana_pubkey::Pubkey>,
    coin_vault: Option<solana_pubkey::Pubkey>,
    pc_vault: Option<solana_pubkey::Pubkey>,
    spl_token_program: Option<solana_pubkey::Pubkey>,
    rent_sysvar: Option<solana_pubkey::Pubkey>,
    fee_discounts: Option<solana_pubkey::Pubkey>,
    args: Option<NewOrderInstructionV3>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl NewOrderV3Builder {
    pub fn new() -> Self {
        Self::default()
    }
    /// the market
    #[inline(always)]
    pub fn market(&mut self, market: solana_pubkey::Pubkey) -> &mut Self {
        self.market = Some(market);
        self
    }
    /// the OpenOrders account to use
    #[inline(always)]
    pub fn open_orders(&mut self, open_orders: solana_pubkey::Pubkey) -> &mut Self {
        self.open_orders = Some(open_orders);
        self
    }
    /// the request queue
    #[inline(always)]
    pub fn request_queue(&mut self, request_queue: solana_pubkey::Pubkey) -> &mut Self {
        self.request_queue = Some(request_queue);
        self
    }
    /// the event queue
    #[inline(always)]
    pub fn event_queue(&mut self, event_queue: solana_pubkey::Pubkey) -> &mut Self {
        self.event_queue = Some(event_queue);
        self
    }
    /// bids
    #[inline(always)]
    pub fn bids(&mut self, bids: solana_pubkey::Pubkey) -> &mut Self {
        self.bids = Some(bids);
        self
    }
    /// asks
    #[inline(always)]
    pub fn asks(&mut self, asks: solana_pubkey::Pubkey) -> &mut Self {
        self.asks = Some(asks);
        self
    }
    /// the (coin or price currency) account paying for the order
    #[inline(always)]
    pub fn order_payer(&mut self, order_payer: solana_pubkey::Pubkey) -> &mut Self {
        self.order_payer = Some(order_payer);
        self
    }
    /// owner of the OpenOrders account
    #[inline(always)]
    pub fn owner(&mut self, owner: solana_pubkey::Pubkey) -> &mut Self {
        self.owner = Some(owner);
        self
    }
    /// coin vault
    #[inline(always)]
    pub fn coin_vault(&mut self, coin_vault: solana_pubkey::Pubkey) -> &mut Self {
        self.coin_vault = Some(coin_vault);
        self
    }
    /// pc vault
    #[inline(always)]
    pub fn pc_vault(&mut self, pc_vault: solana_pubkey::Pubkey) -> &mut Self {
        self.pc_vault = Some(pc_vault);
        self
    }
    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    /// spl token program
    #[inline(always)]
    pub fn spl_token_program(&mut self, spl_token_program: solana_pubkey::Pubkey) -> &mut Self {
        self.spl_token_program = Some(spl_token_program);
        self
    }
    /// `[optional account, default to 'SysvarRent111111111111111111111111111111111']`
    /// the rent sysvar
    #[inline(always)]
    pub fn rent_sysvar(&mut self, rent_sysvar: solana_pubkey::Pubkey) -> &mut Self {
        self.rent_sysvar = Some(rent_sysvar);
        self
    }
    /// `[optional account]`
    /// (optional) the (M)SRM account used for fee discounts
    #[inline(always)]
    pub fn fee_discounts(&mut self, fee_discounts: Option<solana_pubkey::Pubkey>) -> &mut Self {
        self.fee_discounts = fee_discounts;
        self
    }
    #[inline(always)]
    pub fn args(&mut self, args: NewOrderInstructionV3) -> &mut Self {
        self.args = Some(args);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = NewOrderV3 {
            market: self.market.expect("market is not set"),
            open_orders: self.open_orders.expect("open_orders is not set"),
            request_queue: self.request_queue.expect("request_queue is not set"),
            event_queue: self.event_queue.expect("event_queue is not set"),
            bids: self.bids.expect("bids is not set"),
            asks: self.asks.expect("asks is not set"),
            order_payer: self.order_payer.expect("order_payer is not set"),
            owner: self.owner.expect("owner is not set"),
            coin_vault: self.coin_vault.expect("coin_vault is not set"),
            pc_vault: self.pc_vault.expect("pc_vault is not set"),
            spl_token_program: self.spl_token_program.unwrap_or(solana_pubkey::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            rent_sysvar: self.rent_sysvar.unwrap_or(solana_pubkey::pubkey!(
                "SysvarRent111111111111111111111111111111111"
            )),
            fee_discounts: self.fee_discounts,
        };
        let args = NewOrderV3InstructionArgs {
            args: self.args.clone().expect("args is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `new_order_v3` CPI accounts.
pub struct NewOrderV3CpiAccounts<'a, 'b> {
    /// the market
    pub market: &'b solana_account_info::AccountInfo<'a>,
    /// the OpenOrders account to use
    pub open_orders: &'b solana_account_info::AccountInfo<'a>,
    /// the request queue
    pub request_queue: &'b solana_account_info::AccountInfo<'a>,
    /// the event queue
    pub event_queue: &'b solana_account_info::AccountInfo<'a>,
    /// bids
    pub bids: &'b solana_account_info::AccountInfo<'a>,
    /// asks
    pub asks: &'b solana_account_info::AccountInfo<'a>,
    /// the (coin or price currency) account paying for the order
    pub order_payer: &'b solana_account_info::AccountInfo<'a>,
    /// owner of the OpenOrders account
    pub owner: &'b solana_account_info::AccountInfo<'a>,
    /// coin vault
    pub coin_vault: &'b solana_account_info::AccountInfo<'a>,
    /// pc vault
    pub pc_vault: &'b solana_account_info::AccountInfo<'a>,
    /// spl token program
    pub spl_token_program: &'b solana_account_info::AccountInfo<'a>,
    /// the rent sysvar
    pub rent_sysvar: &'b solana_account_info::AccountInfo<'a>,
    /// (optional) the (M)SRM account used for fee discounts
    pub fee_discounts: Option<&'b solana_account_info::AccountInfo<'a>>,
}

/// `new_order_v3` CPI instruction.
pub struct NewOrderV3Cpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,
    /// the market
    pub market: &'b solana_account_info::AccountInfo<'a>,
    /// the OpenOrders account to use
    pub open_orders: &'b solana_account_info::AccountInfo<'a>,
    /// the request queue
    pub request_queue: &'b solana_account_info::AccountInfo<'a>,
    /// the event queue
    pub event_queue: &'b solana_account_info::AccountInfo<'a>,
    /// bids
    pub bids: &'b solana_account_info::AccountInfo<'a>,
    /// asks
    pub asks: &'b solana_account_info::AccountInfo<'a>,
    /// the (coin or price currency) account paying for the order
    pub order_payer: &'b solana_account_info::AccountInfo<'a>,
    /// owner of the OpenOrders account
    pub owner: &'b solana_account_info::AccountInfo<'a>,
    /// coin vault
    pub coin_vault: &'b solana_account_info::AccountInfo<'a>,
    /// pc vault
    pub pc_vault: &'b solana_account_info::AccountInfo<'a>,
    /// spl token program
    pub spl_token_program: &'b solana_account_info::AccountInfo<'a>,
    /// the rent sysvar
    pub rent_sysvar: &'b solana_account_info::AccountInfo<'a>,
    /// (optional) the (M)SRM account used for fee discounts
    pub fee_discounts: Option<&'b solana_account_info::AccountInfo<'a>>,
    /// The arguments for the instruction.
    pub __args: NewOrderV3InstructionArgs,
}

impl<'a, 'b> NewOrderV3Cpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: NewOrderV3CpiAccounts<'a, 'b>,
        args: NewOrderV3InstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            market: accounts.market,
            open_orders: accounts.open_orders,
            request_queue: accounts.request_queue,
            event_queue: accounts.event_queue,
            bids: accounts.bids,
            asks: accounts.asks,
            order_payer: accounts.order_payer,
            owner: accounts.owner,
            coin_vault: accounts.coin_vault,
            pc_vault: accounts.pc_vault,
            spl_token_program: accounts.spl_token_program,
            rent_sysvar: accounts.rent_sysvar,
            fee_discounts: accounts.fee_discounts,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(13 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(
            *self.market.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.open_orders.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.request_queue.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.event_queue.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(*self.bids.key, false));
        accounts.push(solana_instruction::AccountMeta::new(*self.asks.key, false));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.order_payer.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.owner.key,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.coin_vault.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.pc_vault.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.spl_token_program.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.rent_sysvar.key,
            false,
        ));
        if let Some(fee_discounts) = self.fee_discounts {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                *fee_discounts.key,
                false,
            ));
        } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::OPEN_BOOK_DEX_ID,
                false,
            ));
        }
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&NewOrderV3InstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_instruction::Instruction {
            program_id: crate::OPEN_BOOK_DEX_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(14 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.market.clone());
        account_infos.push(self.open_orders.clone());
        account_infos.push(self.request_queue.clone());
        account_infos.push(self.event_queue.clone());
        account_infos.push(self.bids.clone());
        account_infos.push(self.asks.clone());
        account_infos.push(self.order_payer.clone());
        account_infos.push(self.owner.clone());
        account_infos.push(self.coin_vault.clone());
        account_infos.push(self.pc_vault.clone());
        account_infos.push(self.spl_token_program.clone());
        account_infos.push(self.rent_sysvar.clone());
        if let Some(fee_discounts) = self.fee_discounts {
            account_infos.push(fee_discounts.clone());
        }
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `NewOrderV3` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` market
///   1. `[writable]` open_orders
///   2. `[writable]` request_queue
///   3. `[writable]` event_queue
///   4. `[writable]` bids
///   5. `[writable]` asks
///   6. `[writable]` order_payer
///   7. `[signer]` owner
///   8. `[writable]` coin_vault
///   9. `[writable]` pc_vault
///   10. `[]` spl_token_program
///   11. `[]` rent_sysvar
///   12. `[optional]` fee_discounts
#[derive(Clone, Debug)]
pub struct NewOrderV3CpiBuilder<'a, 'b> {
    instruction: Box<NewOrderV3CpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> NewOrderV3CpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(NewOrderV3CpiBuilderInstruction {
            __program: program,
            market: None,
            open_orders: None,
            request_queue: None,
            event_queue: None,
            bids: None,
            asks: None,
            order_payer: None,
            owner: None,
            coin_vault: None,
            pc_vault: None,
            spl_token_program: None,
            rent_sysvar: None,
            fee_discounts: None,
            args: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    /// the market
    #[inline(always)]
    pub fn market(&mut self, market: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.market = Some(market);
        self
    }
    /// the OpenOrders account to use
    #[inline(always)]
    pub fn open_orders(
        &mut self,
        open_orders: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.open_orders = Some(open_orders);
        self
    }
    /// the request queue
    #[inline(always)]
    pub fn request_queue(
        &mut self,
        request_queue: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.request_queue = Some(request_queue);
        self
    }
    /// the event queue
    #[inline(always)]
    pub fn event_queue(
        &mut self,
        event_queue: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.event_queue = Some(event_queue);
        self
    }
    /// bids
    #[inline(always)]
    pub fn bids(&mut self, bids: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.bids = Some(bids);
        self
    }
    /// asks
    #[inline(always)]
    pub fn asks(&mut self, asks: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.asks = Some(asks);
        self
    }
    /// the (coin or price currency) account paying for the order
    #[inline(always)]
    pub fn order_payer(
        &mut self,
        order_payer: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.order_payer = Some(order_payer);
        self
    }
    /// owner of the OpenOrders account
    #[inline(always)]
    pub fn owner(&mut self, owner: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.owner = Some(owner);
        self
    }
    /// coin vault
    #[inline(always)]
    pub fn coin_vault(
        &mut self,
        coin_vault: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.coin_vault = Some(coin_vault);
        self
    }
    /// pc vault
    #[inline(always)]
    pub fn pc_vault(&mut self, pc_vault: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.pc_vault = Some(pc_vault);
        self
    }
    /// spl token program
    #[inline(always)]
    pub fn spl_token_program(
        &mut self,
        spl_token_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.spl_token_program = Some(spl_token_program);
        self
    }
    /// the rent sysvar
    #[inline(always)]
    pub fn rent_sysvar(
        &mut self,
        rent_sysvar: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.rent_sysvar = Some(rent_sysvar);
        self
    }
    /// `[optional account]`
    /// (optional) the (M)SRM account used for fee discounts
    #[inline(always)]
    pub fn fee_discounts(
        &mut self,
        fee_discounts: Option<&'b solana_account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.fee_discounts = fee_discounts;
        self
    }
    #[inline(always)]
    pub fn args(&mut self, args: NewOrderInstructionV3) -> &mut Self {
        self.instruction.args = Some(args);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        let args = NewOrderV3InstructionArgs {
            args: self.instruction.args.clone().expect("args is not set"),
        };
        let instruction = NewOrderV3Cpi {
            __program: self.instruction.__program,

            market: self.instruction.market.expect("market is not set"),

            open_orders: self
                .instruction
                .open_orders
                .expect("open_orders is not set"),

            request_queue: self
                .instruction
                .request_queue
                .expect("request_queue is not set"),

            event_queue: self
                .instruction
                .event_queue
                .expect("event_queue is not set"),

            bids: self.instruction.bids.expect("bids is not set"),

            asks: self.instruction.asks.expect("asks is not set"),

            order_payer: self
                .instruction
                .order_payer
                .expect("order_payer is not set"),

            owner: self.instruction.owner.expect("owner is not set"),

            coin_vault: self.instruction.coin_vault.expect("coin_vault is not set"),

            pc_vault: self.instruction.pc_vault.expect("pc_vault is not set"),

            spl_token_program: self
                .instruction
                .spl_token_program
                .expect("spl_token_program is not set"),

            rent_sysvar: self
                .instruction
                .rent_sysvar
                .expect("rent_sysvar is not set"),

            fee_discounts: self.instruction.fee_discounts,
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct NewOrderV3CpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    market: Option<&'b solana_account_info::AccountInfo<'a>>,
    open_orders: Option<&'b solana_account_info::AccountInfo<'a>>,
    request_queue: Option<&'b solana_account_info::AccountInfo<'a>>,
    event_queue: Option<&'b solana_account_info::AccountInfo<'a>>,
    bids: Option<&'b solana_account_info::AccountInfo<'a>>,
    asks: Option<&'b solana_account_info::AccountInfo<'a>>,
    order_payer: Option<&'b solana_account_info::AccountInfo<'a>>,
    owner: Option<&'b solana_account_info::AccountInfo<'a>>,
    coin_vault: Option<&'b solana_account_info::AccountInfo<'a>>,
    pc_vault: Option<&'b solana_account_info::AccountInfo<'a>>,
    spl_token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    rent_sysvar: Option<&'b solana_account_info::AccountInfo<'a>>,
    fee_discounts: Option<&'b solana_account_info::AccountInfo<'a>>,
    args: Option<NewOrderInstructionV3>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
