//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
#[derive(Debug)]
pub struct CloseOpenOrders {
    /// OpenOrders
    pub open_orders: solana_pubkey::Pubkey,
    /// the OpenOrders owner
    pub owner: solana_pubkey::Pubkey,
    /// the destination account to send rent exemption SOL to
    pub destination: solana_pubkey::Pubkey,
    /// market
    pub market: solana_pubkey::Pubkey,
}

impl CloseOpenOrders {
    pub fn instruction(&self) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(4 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(
            self.open_orders,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.owner, true,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.destination,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.market,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = borsh::to_vec(&CloseOpenOrdersInstructionData::new()).unwrap();

        solana_instruction::Instruction {
            program_id: crate::OPEN_BOOK_DEX_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CloseOpenOrdersInstructionData {
    discriminator: [u8; 8],
}

impl CloseOpenOrdersInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [200, 216, 63, 239, 7, 230, 255, 20],
        }
    }
}

impl Default for CloseOpenOrdersInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

/// Instruction builder for `CloseOpenOrders`.
///
/// ### Accounts:
///
///   0. `[writable]` open_orders
///   1. `[signer]` owner
///   2. `[writable]` destination
///   3. `[]` market
#[derive(Clone, Debug, Default)]
pub struct CloseOpenOrdersBuilder {
    open_orders: Option<solana_pubkey::Pubkey>,
    owner: Option<solana_pubkey::Pubkey>,
    destination: Option<solana_pubkey::Pubkey>,
    market: Option<solana_pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl CloseOpenOrdersBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    /// OpenOrders
    #[inline(always)]
    pub fn open_orders(&mut self, open_orders: solana_pubkey::Pubkey) -> &mut Self {
        self.open_orders = Some(open_orders);
        self
    }
    /// the OpenOrders owner
    #[inline(always)]
    pub fn owner(&mut self, owner: solana_pubkey::Pubkey) -> &mut Self {
        self.owner = Some(owner);
        self
    }
    /// the destination account to send rent exemption SOL to
    #[inline(always)]
    pub fn destination(&mut self, destination: solana_pubkey::Pubkey) -> &mut Self {
        self.destination = Some(destination);
        self
    }
    /// market
    #[inline(always)]
    pub fn market(&mut self, market: solana_pubkey::Pubkey) -> &mut Self {
        self.market = Some(market);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = CloseOpenOrders {
            open_orders: self.open_orders.expect("open_orders is not set"),
            owner: self.owner.expect("owner is not set"),
            destination: self.destination.expect("destination is not set"),
            market: self.market.expect("market is not set"),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `close_open_orders` CPI accounts.
pub struct CloseOpenOrdersCpiAccounts<'a, 'b> {
    /// OpenOrders
    pub open_orders: &'b solana_account_info::AccountInfo<'a>,
    /// the OpenOrders owner
    pub owner: &'b solana_account_info::AccountInfo<'a>,
    /// the destination account to send rent exemption SOL to
    pub destination: &'b solana_account_info::AccountInfo<'a>,
    /// market
    pub market: &'b solana_account_info::AccountInfo<'a>,
}

/// `close_open_orders` CPI instruction.
pub struct CloseOpenOrdersCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,
    /// OpenOrders
    pub open_orders: &'b solana_account_info::AccountInfo<'a>,
    /// the OpenOrders owner
    pub owner: &'b solana_account_info::AccountInfo<'a>,
    /// the destination account to send rent exemption SOL to
    pub destination: &'b solana_account_info::AccountInfo<'a>,
    /// market
    pub market: &'b solana_account_info::AccountInfo<'a>,
}

impl<'a, 'b> CloseOpenOrdersCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: CloseOpenOrdersCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            open_orders: accounts.open_orders,
            owner: accounts.owner,
            destination: accounts.destination,
            market: accounts.market,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(4 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(
            *self.open_orders.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.owner.key,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.destination.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.market.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = borsh::to_vec(&CloseOpenOrdersInstructionData::new()).unwrap();

        let instruction = solana_instruction::Instruction {
            program_id: crate::OPEN_BOOK_DEX_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(5 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.open_orders.clone());
        account_infos.push(self.owner.clone());
        account_infos.push(self.destination.clone());
        account_infos.push(self.market.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `CloseOpenOrders` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` open_orders
///   1. `[signer]` owner
///   2. `[writable]` destination
///   3. `[]` market
#[derive(Clone, Debug)]
pub struct CloseOpenOrdersCpiBuilder<'a, 'b> {
    instruction: Box<CloseOpenOrdersCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> CloseOpenOrdersCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(CloseOpenOrdersCpiBuilderInstruction {
            __program: program,
            open_orders: None,
            owner: None,
            destination: None,
            market: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    /// OpenOrders
    #[inline(always)]
    pub fn open_orders(
        &mut self,
        open_orders: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.open_orders = Some(open_orders);
        self
    }
    /// the OpenOrders owner
    #[inline(always)]
    pub fn owner(&mut self, owner: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.owner = Some(owner);
        self
    }
    /// the destination account to send rent exemption SOL to
    #[inline(always)]
    pub fn destination(
        &mut self,
        destination: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.destination = Some(destination);
        self
    }
    /// market
    #[inline(always)]
    pub fn market(&mut self, market: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.market = Some(market);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        let instruction = CloseOpenOrdersCpi {
            __program: self.instruction.__program,

            open_orders: self
                .instruction
                .open_orders
                .expect("open_orders is not set"),

            owner: self.instruction.owner.expect("owner is not set"),

            destination: self
                .instruction
                .destination
                .expect("destination is not set"),

            market: self.instruction.market.expect("market is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct CloseOpenOrdersCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    open_orders: Option<&'b solana_account_info::AccountInfo<'a>>,
    owner: Option<&'b solana_account_info::AccountInfo<'a>>,
    destination: Option<&'b solana_account_info::AccountInfo<'a>>,
    market: Option<&'b solana_account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
