//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
#[derive(Debug)]
pub struct ConsumeEventsPermissioned {
    /// OpenOrders; TODO: this is an array
    pub open_orders: solana_pubkey::Pubkey,
    /// market
    pub market: solana_pubkey::Pubkey,
    /// event queue
    pub event_queue: solana_pubkey::Pubkey,
    /// crank authority
    pub crank_authority: solana_pubkey::Pubkey,
}

impl ConsumeEventsPermissioned {
    pub fn instruction(
        &self,
        args: ConsumeEventsPermissionedInstructionArgs,
    ) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: ConsumeEventsPermissionedInstructionArgs,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(4 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(
            self.open_orders,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.market, false));
        accounts.push(solana_instruction::AccountMeta::new(
            self.event_queue,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.crank_authority,
            true,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&ConsumeEventsPermissionedInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_instruction::Instruction {
            program_id: crate::OPEN_BOOK_DEX_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct ConsumeEventsPermissionedInstructionData {
    discriminator: [u8; 8],
}

impl ConsumeEventsPermissionedInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [133, 69, 70, 199, 52, 0, 39, 191],
        }
    }
}

impl Default for ConsumeEventsPermissionedInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct ConsumeEventsPermissionedInstructionArgs {
    pub limit: u16,
}

/// Instruction builder for `ConsumeEventsPermissioned`.
///
/// ### Accounts:
///
///   0. `[writable]` open_orders
///   1. `[writable]` market
///   2. `[writable]` event_queue
///   3. `[signer]` crank_authority
#[derive(Clone, Debug, Default)]
pub struct ConsumeEventsPermissionedBuilder {
    open_orders: Option<solana_pubkey::Pubkey>,
    market: Option<solana_pubkey::Pubkey>,
    event_queue: Option<solana_pubkey::Pubkey>,
    crank_authority: Option<solana_pubkey::Pubkey>,
    limit: Option<u16>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl ConsumeEventsPermissionedBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    /// OpenOrders; TODO: this is an array
    #[inline(always)]
    pub fn open_orders(&mut self, open_orders: solana_pubkey::Pubkey) -> &mut Self {
        self.open_orders = Some(open_orders);
        self
    }
    /// market
    #[inline(always)]
    pub fn market(&mut self, market: solana_pubkey::Pubkey) -> &mut Self {
        self.market = Some(market);
        self
    }
    /// event queue
    #[inline(always)]
    pub fn event_queue(&mut self, event_queue: solana_pubkey::Pubkey) -> &mut Self {
        self.event_queue = Some(event_queue);
        self
    }
    /// crank authority
    #[inline(always)]
    pub fn crank_authority(&mut self, crank_authority: solana_pubkey::Pubkey) -> &mut Self {
        self.crank_authority = Some(crank_authority);
        self
    }
    #[inline(always)]
    pub fn limit(&mut self, limit: u16) -> &mut Self {
        self.limit = Some(limit);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = ConsumeEventsPermissioned {
            open_orders: self.open_orders.expect("open_orders is not set"),
            market: self.market.expect("market is not set"),
            event_queue: self.event_queue.expect("event_queue is not set"),
            crank_authority: self.crank_authority.expect("crank_authority is not set"),
        };
        let args = ConsumeEventsPermissionedInstructionArgs {
            limit: self.limit.clone().expect("limit is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `consume_events_permissioned` CPI accounts.
pub struct ConsumeEventsPermissionedCpiAccounts<'a, 'b> {
    /// OpenOrders; TODO: this is an array
    pub open_orders: &'b solana_account_info::AccountInfo<'a>,
    /// market
    pub market: &'b solana_account_info::AccountInfo<'a>,
    /// event queue
    pub event_queue: &'b solana_account_info::AccountInfo<'a>,
    /// crank authority
    pub crank_authority: &'b solana_account_info::AccountInfo<'a>,
}

/// `consume_events_permissioned` CPI instruction.
pub struct ConsumeEventsPermissionedCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,
    /// OpenOrders; TODO: this is an array
    pub open_orders: &'b solana_account_info::AccountInfo<'a>,
    /// market
    pub market: &'b solana_account_info::AccountInfo<'a>,
    /// event queue
    pub event_queue: &'b solana_account_info::AccountInfo<'a>,
    /// crank authority
    pub crank_authority: &'b solana_account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: ConsumeEventsPermissionedInstructionArgs,
}

impl<'a, 'b> ConsumeEventsPermissionedCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: ConsumeEventsPermissionedCpiAccounts<'a, 'b>,
        args: ConsumeEventsPermissionedInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            open_orders: accounts.open_orders,
            market: accounts.market,
            event_queue: accounts.event_queue,
            crank_authority: accounts.crank_authority,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(4 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(
            *self.open_orders.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.market.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.event_queue.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.crank_authority.key,
            true,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&ConsumeEventsPermissionedInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_instruction::Instruction {
            program_id: crate::OPEN_BOOK_DEX_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(5 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.open_orders.clone());
        account_infos.push(self.market.clone());
        account_infos.push(self.event_queue.clone());
        account_infos.push(self.crank_authority.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `ConsumeEventsPermissioned` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` open_orders
///   1. `[writable]` market
///   2. `[writable]` event_queue
///   3. `[signer]` crank_authority
#[derive(Clone, Debug)]
pub struct ConsumeEventsPermissionedCpiBuilder<'a, 'b> {
    instruction: Box<ConsumeEventsPermissionedCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> ConsumeEventsPermissionedCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(ConsumeEventsPermissionedCpiBuilderInstruction {
            __program: program,
            open_orders: None,
            market: None,
            event_queue: None,
            crank_authority: None,
            limit: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    /// OpenOrders; TODO: this is an array
    #[inline(always)]
    pub fn open_orders(
        &mut self,
        open_orders: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.open_orders = Some(open_orders);
        self
    }
    /// market
    #[inline(always)]
    pub fn market(&mut self, market: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.market = Some(market);
        self
    }
    /// event queue
    #[inline(always)]
    pub fn event_queue(
        &mut self,
        event_queue: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.event_queue = Some(event_queue);
        self
    }
    /// crank authority
    #[inline(always)]
    pub fn crank_authority(
        &mut self,
        crank_authority: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.crank_authority = Some(crank_authority);
        self
    }
    #[inline(always)]
    pub fn limit(&mut self, limit: u16) -> &mut Self {
        self.instruction.limit = Some(limit);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        let args = ConsumeEventsPermissionedInstructionArgs {
            limit: self.instruction.limit.clone().expect("limit is not set"),
        };
        let instruction = ConsumeEventsPermissionedCpi {
            __program: self.instruction.__program,

            open_orders: self
                .instruction
                .open_orders
                .expect("open_orders is not set"),

            market: self.instruction.market.expect("market is not set"),

            event_queue: self
                .instruction
                .event_queue
                .expect("event_queue is not set"),

            crank_authority: self
                .instruction
                .crank_authority
                .expect("crank_authority is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct ConsumeEventsPermissionedCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    open_orders: Option<&'b solana_account_info::AccountInfo<'a>>,
    market: Option<&'b solana_account_info::AccountInfo<'a>>,
    event_queue: Option<&'b solana_account_info::AccountInfo<'a>>,
    crank_authority: Option<&'b solana_account_info::AccountInfo<'a>>,
    limit: Option<u16>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
