//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
#[derive(Debug)]
pub struct SettleFunds {
    /// market
    pub market: solana_pubkey::Pubkey,
    /// OpenOrders
    pub open_orders: solana_pubkey::Pubkey,
    /// the OpenOrders owner
    pub owner: solana_pubkey::Pubkey,
    /// coin vault
    pub coin_vault: solana_pubkey::Pubkey,
    /// pc vault
    pub pc_vault: solana_pubkey::Pubkey,
    /// coin wallet
    pub coin_wallet: solana_pubkey::Pubkey,
    /// pc wallet
    pub pc_wallet: solana_pubkey::Pubkey,
    /// vault signer
    pub vault_signer: solana_pubkey::Pubkey,
    /// spl token program
    pub spl_token_program: solana_pubkey::Pubkey,
    /// (optional) referrer pc wallet
    pub referrer_pc_wallet: Option<solana_pubkey::Pubkey>,
}

impl SettleFunds {
    pub fn instruction(&self) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(10 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(self.market, false));
        accounts.push(solana_instruction::AccountMeta::new(
            self.open_orders,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.owner, true,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.coin_vault, false));
        accounts.push(solana_instruction::AccountMeta::new(self.pc_vault, false));
        accounts.push(solana_instruction::AccountMeta::new(
            self.coin_wallet,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.pc_wallet, false));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.vault_signer,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.spl_token_program,
            false,
        ));
        if let Some(referrer_pc_wallet) = self.referrer_pc_wallet {
            accounts.push(solana_instruction::AccountMeta::new(
                referrer_pc_wallet,
                false,
            ));
        } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::OPEN_BOOK_DEX_ID,
                false,
            ));
        }
        accounts.extend_from_slice(remaining_accounts);
        let data = borsh::to_vec(&SettleFundsInstructionData::new()).unwrap();

        solana_instruction::Instruction {
            program_id: crate::OPEN_BOOK_DEX_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct SettleFundsInstructionData {
    discriminator: [u8; 8],
}

impl SettleFundsInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [238, 64, 163, 96, 75, 171, 16, 33],
        }
    }
}

impl Default for SettleFundsInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

/// Instruction builder for `SettleFunds`.
///
/// ### Accounts:
///
///   0. `[writable]` market
///   1. `[writable]` open_orders
///   2. `[signer]` owner
///   3. `[writable]` coin_vault
///   4. `[writable]` pc_vault
///   5. `[writable]` coin_wallet
///   6. `[writable]` pc_wallet
///   7. `[]` vault_signer
///   8. `[optional]` spl_token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   9. `[writable, optional]` referrer_pc_wallet
#[derive(Clone, Debug, Default)]
pub struct SettleFundsBuilder {
    market: Option<solana_pubkey::Pubkey>,
    open_orders: Option<solana_pubkey::Pubkey>,
    owner: Option<solana_pubkey::Pubkey>,
    coin_vault: Option<solana_pubkey::Pubkey>,
    pc_vault: Option<solana_pubkey::Pubkey>,
    coin_wallet: Option<solana_pubkey::Pubkey>,
    pc_wallet: Option<solana_pubkey::Pubkey>,
    vault_signer: Option<solana_pubkey::Pubkey>,
    spl_token_program: Option<solana_pubkey::Pubkey>,
    referrer_pc_wallet: Option<solana_pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl SettleFundsBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    /// market
    #[inline(always)]
    pub fn market(&mut self, market: solana_pubkey::Pubkey) -> &mut Self {
        self.market = Some(market);
        self
    }
    /// OpenOrders
    #[inline(always)]
    pub fn open_orders(&mut self, open_orders: solana_pubkey::Pubkey) -> &mut Self {
        self.open_orders = Some(open_orders);
        self
    }
    /// the OpenOrders owner
    #[inline(always)]
    pub fn owner(&mut self, owner: solana_pubkey::Pubkey) -> &mut Self {
        self.owner = Some(owner);
        self
    }
    /// coin vault
    #[inline(always)]
    pub fn coin_vault(&mut self, coin_vault: solana_pubkey::Pubkey) -> &mut Self {
        self.coin_vault = Some(coin_vault);
        self
    }
    /// pc vault
    #[inline(always)]
    pub fn pc_vault(&mut self, pc_vault: solana_pubkey::Pubkey) -> &mut Self {
        self.pc_vault = Some(pc_vault);
        self
    }
    /// coin wallet
    #[inline(always)]
    pub fn coin_wallet(&mut self, coin_wallet: solana_pubkey::Pubkey) -> &mut Self {
        self.coin_wallet = Some(coin_wallet);
        self
    }
    /// pc wallet
    #[inline(always)]
    pub fn pc_wallet(&mut self, pc_wallet: solana_pubkey::Pubkey) -> &mut Self {
        self.pc_wallet = Some(pc_wallet);
        self
    }
    /// vault signer
    #[inline(always)]
    pub fn vault_signer(&mut self, vault_signer: solana_pubkey::Pubkey) -> &mut Self {
        self.vault_signer = Some(vault_signer);
        self
    }
    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    /// spl token program
    #[inline(always)]
    pub fn spl_token_program(&mut self, spl_token_program: solana_pubkey::Pubkey) -> &mut Self {
        self.spl_token_program = Some(spl_token_program);
        self
    }
    /// `[optional account]`
    /// (optional) referrer pc wallet
    #[inline(always)]
    pub fn referrer_pc_wallet(
        &mut self,
        referrer_pc_wallet: Option<solana_pubkey::Pubkey>,
    ) -> &mut Self {
        self.referrer_pc_wallet = referrer_pc_wallet;
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = SettleFunds {
            market: self.market.expect("market is not set"),
            open_orders: self.open_orders.expect("open_orders is not set"),
            owner: self.owner.expect("owner is not set"),
            coin_vault: self.coin_vault.expect("coin_vault is not set"),
            pc_vault: self.pc_vault.expect("pc_vault is not set"),
            coin_wallet: self.coin_wallet.expect("coin_wallet is not set"),
            pc_wallet: self.pc_wallet.expect("pc_wallet is not set"),
            vault_signer: self.vault_signer.expect("vault_signer is not set"),
            spl_token_program: self.spl_token_program.unwrap_or(solana_pubkey::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            referrer_pc_wallet: self.referrer_pc_wallet,
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `settle_funds` CPI accounts.
pub struct SettleFundsCpiAccounts<'a, 'b> {
    /// market
    pub market: &'b solana_account_info::AccountInfo<'a>,
    /// OpenOrders
    pub open_orders: &'b solana_account_info::AccountInfo<'a>,
    /// the OpenOrders owner
    pub owner: &'b solana_account_info::AccountInfo<'a>,
    /// coin vault
    pub coin_vault: &'b solana_account_info::AccountInfo<'a>,
    /// pc vault
    pub pc_vault: &'b solana_account_info::AccountInfo<'a>,
    /// coin wallet
    pub coin_wallet: &'b solana_account_info::AccountInfo<'a>,
    /// pc wallet
    pub pc_wallet: &'b solana_account_info::AccountInfo<'a>,
    /// vault signer
    pub vault_signer: &'b solana_account_info::AccountInfo<'a>,
    /// spl token program
    pub spl_token_program: &'b solana_account_info::AccountInfo<'a>,
    /// (optional) referrer pc wallet
    pub referrer_pc_wallet: Option<&'b solana_account_info::AccountInfo<'a>>,
}

/// `settle_funds` CPI instruction.
pub struct SettleFundsCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,
    /// market
    pub market: &'b solana_account_info::AccountInfo<'a>,
    /// OpenOrders
    pub open_orders: &'b solana_account_info::AccountInfo<'a>,
    /// the OpenOrders owner
    pub owner: &'b solana_account_info::AccountInfo<'a>,
    /// coin vault
    pub coin_vault: &'b solana_account_info::AccountInfo<'a>,
    /// pc vault
    pub pc_vault: &'b solana_account_info::AccountInfo<'a>,
    /// coin wallet
    pub coin_wallet: &'b solana_account_info::AccountInfo<'a>,
    /// pc wallet
    pub pc_wallet: &'b solana_account_info::AccountInfo<'a>,
    /// vault signer
    pub vault_signer: &'b solana_account_info::AccountInfo<'a>,
    /// spl token program
    pub spl_token_program: &'b solana_account_info::AccountInfo<'a>,
    /// (optional) referrer pc wallet
    pub referrer_pc_wallet: Option<&'b solana_account_info::AccountInfo<'a>>,
}

impl<'a, 'b> SettleFundsCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: SettleFundsCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            market: accounts.market,
            open_orders: accounts.open_orders,
            owner: accounts.owner,
            coin_vault: accounts.coin_vault,
            pc_vault: accounts.pc_vault,
            coin_wallet: accounts.coin_wallet,
            pc_wallet: accounts.pc_wallet,
            vault_signer: accounts.vault_signer,
            spl_token_program: accounts.spl_token_program,
            referrer_pc_wallet: accounts.referrer_pc_wallet,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(10 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(
            *self.market.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.open_orders.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.owner.key,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.coin_vault.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.pc_vault.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.coin_wallet.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.pc_wallet.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.vault_signer.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.spl_token_program.key,
            false,
        ));
        if let Some(referrer_pc_wallet) = self.referrer_pc_wallet {
            accounts.push(solana_instruction::AccountMeta::new(
                *referrer_pc_wallet.key,
                false,
            ));
        } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::OPEN_BOOK_DEX_ID,
                false,
            ));
        }
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = borsh::to_vec(&SettleFundsInstructionData::new()).unwrap();

        let instruction = solana_instruction::Instruction {
            program_id: crate::OPEN_BOOK_DEX_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(11 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.market.clone());
        account_infos.push(self.open_orders.clone());
        account_infos.push(self.owner.clone());
        account_infos.push(self.coin_vault.clone());
        account_infos.push(self.pc_vault.clone());
        account_infos.push(self.coin_wallet.clone());
        account_infos.push(self.pc_wallet.clone());
        account_infos.push(self.vault_signer.clone());
        account_infos.push(self.spl_token_program.clone());
        if let Some(referrer_pc_wallet) = self.referrer_pc_wallet {
            account_infos.push(referrer_pc_wallet.clone());
        }
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `SettleFunds` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` market
///   1. `[writable]` open_orders
///   2. `[signer]` owner
///   3. `[writable]` coin_vault
///   4. `[writable]` pc_vault
///   5. `[writable]` coin_wallet
///   6. `[writable]` pc_wallet
///   7. `[]` vault_signer
///   8. `[]` spl_token_program
///   9. `[writable, optional]` referrer_pc_wallet
#[derive(Clone, Debug)]
pub struct SettleFundsCpiBuilder<'a, 'b> {
    instruction: Box<SettleFundsCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> SettleFundsCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(SettleFundsCpiBuilderInstruction {
            __program: program,
            market: None,
            open_orders: None,
            owner: None,
            coin_vault: None,
            pc_vault: None,
            coin_wallet: None,
            pc_wallet: None,
            vault_signer: None,
            spl_token_program: None,
            referrer_pc_wallet: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    /// market
    #[inline(always)]
    pub fn market(&mut self, market: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.market = Some(market);
        self
    }
    /// OpenOrders
    #[inline(always)]
    pub fn open_orders(
        &mut self,
        open_orders: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.open_orders = Some(open_orders);
        self
    }
    /// the OpenOrders owner
    #[inline(always)]
    pub fn owner(&mut self, owner: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.owner = Some(owner);
        self
    }
    /// coin vault
    #[inline(always)]
    pub fn coin_vault(
        &mut self,
        coin_vault: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.coin_vault = Some(coin_vault);
        self
    }
    /// pc vault
    #[inline(always)]
    pub fn pc_vault(&mut self, pc_vault: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.pc_vault = Some(pc_vault);
        self
    }
    /// coin wallet
    #[inline(always)]
    pub fn coin_wallet(
        &mut self,
        coin_wallet: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.coin_wallet = Some(coin_wallet);
        self
    }
    /// pc wallet
    #[inline(always)]
    pub fn pc_wallet(&mut self, pc_wallet: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.pc_wallet = Some(pc_wallet);
        self
    }
    /// vault signer
    #[inline(always)]
    pub fn vault_signer(
        &mut self,
        vault_signer: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.vault_signer = Some(vault_signer);
        self
    }
    /// spl token program
    #[inline(always)]
    pub fn spl_token_program(
        &mut self,
        spl_token_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.spl_token_program = Some(spl_token_program);
        self
    }
    /// `[optional account]`
    /// (optional) referrer pc wallet
    #[inline(always)]
    pub fn referrer_pc_wallet(
        &mut self,
        referrer_pc_wallet: Option<&'b solana_account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.referrer_pc_wallet = referrer_pc_wallet;
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        let instruction = SettleFundsCpi {
            __program: self.instruction.__program,

            market: self.instruction.market.expect("market is not set"),

            open_orders: self
                .instruction
                .open_orders
                .expect("open_orders is not set"),

            owner: self.instruction.owner.expect("owner is not set"),

            coin_vault: self.instruction.coin_vault.expect("coin_vault is not set"),

            pc_vault: self.instruction.pc_vault.expect("pc_vault is not set"),

            coin_wallet: self
                .instruction
                .coin_wallet
                .expect("coin_wallet is not set"),

            pc_wallet: self.instruction.pc_wallet.expect("pc_wallet is not set"),

            vault_signer: self
                .instruction
                .vault_signer
                .expect("vault_signer is not set"),

            spl_token_program: self
                .instruction
                .spl_token_program
                .expect("spl_token_program is not set"),

            referrer_pc_wallet: self.instruction.referrer_pc_wallet,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct SettleFundsCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    market: Option<&'b solana_account_info::AccountInfo<'a>>,
    open_orders: Option<&'b solana_account_info::AccountInfo<'a>>,
    owner: Option<&'b solana_account_info::AccountInfo<'a>>,
    coin_vault: Option<&'b solana_account_info::AccountInfo<'a>>,
    pc_vault: Option<&'b solana_account_info::AccountInfo<'a>>,
    coin_wallet: Option<&'b solana_account_info::AccountInfo<'a>>,
    pc_wallet: Option<&'b solana_account_info::AccountInfo<'a>>,
    vault_signer: Option<&'b solana_account_info::AccountInfo<'a>>,
    spl_token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    referrer_pc_wallet: Option<&'b solana_account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
